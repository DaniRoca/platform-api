FORMAT: 1A
HOST: https://tenant.acrolinx.cloud

# Acrolinx Core Platform API

The Acrolinx Core Platform API is the new REST API for accessing all functionality of the Core Platform.

Open points are marked with a TODO annotation.

# Authentication and Authorization of the Acrolinx Platform API

When using the Acrolinx Platform API, you'll need to be authorized and authenticated. This is done by providing an **Access Token**.

An **Access Token** is a encoded and cryptogaphically singed string. It has the following characteristics:

* It is bound to a user
* There can be an infinite number of Access Tokens per user
* It has a certain lifetime (default 30 Days, can be changed)
* It will expire after the lifetime or when the password of the associated user is changed
* It provides authorization and authentication

How to get an **Access Token**?
You can get an Access Token by using the Acrolinx sign-in workflow.
(further description here)

How to use an Access Token?

Every request you are doing with the Acrolinx Platform API must contain a [header](#header-access-token) providing the Access Token:

```
    X-Acrolinx-Authorization: WERTZUIOP
```

## API Token
An API Token is an Access Token but with special characteristics:

* It has a lifetime of 4 years
* It expires after this lifetime but **not when password of the user changes.**
* Only one API Token can be bound to a user at the time

You can get an API Token by accessing user settings page on the Dashboard and generate one.

Other than that the **API Token** functions as an **Access Token**.

# General Headers

## Access Token

All methods except "index" and "poll auth token" require a valid access token in the `X-Acrolinx-Auth` header even if not explicitly mentioned below.
If the token is invalid, a `401` response is returned (see `401` response of "index") even if this response isn’t explicitly mentioned below.

Example:

```
    X-Acrolinx-Auth: 123579080a8d1fee12490a90dc3
```

## Base URL

To support reverse proxies, a client may provide the `X-Acrolinx-Base-Url` header with each request. If the response body to the request
contains links into the Acrolinx API, the server will prefix them with the given value. The provided value must be an absolute URL including scheme and host.
Malformed values will result in a `400` status code.

Example:

```
    X-Acrolinx-Base-Url: https://example.com/path/
```

## Client Locale

All methods accept a header `X-Acrolinx-Client-Locale`, with which the client can identify its own locale (for example, UI language).
The value of the header field must be a single language tag that is compliant to BCP 47. The server will try to return message strings
and other locale-specific parts of the response in the requested language.

Example:

```
    X-Acrolinx-Client-Locale: de-CH
```

The server tries to match the sent locale to the closest locale that it’s able to support, for example, `de`.
The "index" request returns the list of supported locales. The server falls back to the default `en` locale in the following cases:

* no X-Acrolinx-Client-Locale header is sent
* there’s no matching supported locale
* for the given response, there’s no appropriate localization available

## Client signature

If not otherwise documented, all methods require a header `X-Acrolinx-Client` to be set. The header must be a valid client signature. The request
returns an error, if the header is omitted or the given signature is not valid.

The format of the signature is `clientSignature;clientVersion;buildNumber`, where `clientSignature` is the signature as configured in the Acrolinx license and
`clientVersion` is the version number of the client and `buildNumber` the build number of the client.

Example:

```
    X-Acrolinx-Client: QWxlU2hNyb2bHVnLWlunhQyR29Rm9xpbvZ2lZXRz; 1.0.1.45; 12345
```

# Response format

The API provides a consistent format for all responses. Each response as a field `links` and one of the three fields `error`, `progress`, `data`.

The `links` field contains further URLs that can be used as a next step in the workflow.
`error` is set, of the request did not succeed. This is accompanied by a HTTP status code above or equal 4xx.
`progress` means, that the processing is not yet finished and the client has to poll for the final result.
`data` contains the actual result data, the processing is sucessfully finished.

## Error responses

### General format

The API provides a consistent format for errors, which is based on [RFC7807](https://datatracker.ietf.org/doc/rfc7807/?include_text=1).
The format is JSON and the API guarantees to send the fields `type`, `title`, `detail`, `status` with each error response.

Example:

```
HTTP/1.1 403 Forbidden
Content-Type: application/problem+json
{
  "error": {
    "type": "invalid_token",
    "title": "Invalid auth token",
    "detail": "The provided token for authorization is expired.",
    "status": 403
  }
  "links": {}
}
```

* `type` is a unique identifier for the type of error. A client may choose a workflow for the error handling depending on the type.
* `title` is a short description of the error. It can be displayed to the user as title of the error.
* `detail` is a more verbose description of the error. It is suitable to be displayed to the user.
* `status` is redundant to the HTTP status code. It may be helpful in case a proxy changed the HTTP status code of the original API response.
* An optional `reference` field with an id may be present. If there, this id can be found in the Acrolinx log files to support better problem analysis.

Depending on `type` additional fields may be part of the response providing more detailled information.

Additional fields may be added in future. A client must not break because of unexpected fields.

### Error types

Type | Description| What to do
-----|------------|------------
`client` | Unspecific error caused by the client's request. | Check logs and configuration or the client code.
`server` | Unspecific error during processing of a request in Acrolinx. | Check logs and configuration.
`client_signature_missing` | The `X-Acrolinx-Client` header was missing.  | Contact Acrolinx, how to aquire a valid license.
`client_signature_rejected` | The given signature in the `X-Acrolinx-Client` header was is invalid. | Contact Acrolinx, how to aquire a valid license.
`sso` | Returned for any Single Sign On errors. | Most probably this is a configuration issue.
`auth` | Invalid authentication. | Use another access token.
`interactive_sign_in_timed_out` | The interactive sign-in process timed out. | Start new.
`bad_content` | Could not decode content. | Probably points to an error in the client.
`check_cancelled` | The check was cancelled. No result is available. | Probably points to an error in the client.
`check_failed` | The check failed. | Check logs and configuration.
`invalid_base_url` | The request contained an invalid base URL in the `X-Acrolinx-Base-URL` header. | Check configuration of client or proxies, which set the header.
`custom_fields_incomplete` | Custom field values are missing. |Please provide values for all required custom fields before or when checking a document.

## Progress responses

A progress response always contains a field `retryAfter`, which tells the client many seconds to wait until the next poll request.
Optionally the response can have the fields `message`, that contains a human user readable text about the current status, and `percent`, that
is a number and shows the progress in percent.
A progress response has always the `Retry-After` header set with the same value as the `retryAfter` field and a HTTP status 202.

Examples:

```
HTTP/1.1 202 Accepted
Content-Type: application/json
{
  "progress": {
    "message": "The request is queued on position 5.",
    "percent": 2,
    "retryAfter": 5
  }
  "links": {
    "cancel" : "https://tenant.acrolinx.cloud/api/v1/checks/ID100"
  }
}
```

```
HTTP/1.1 202 Accepted
Content-Type: application/json
{
  "progress": {
    "retryAfter": 1
  }
  "links": {}
}
```

## Successful responses

The fields of a successful response with data depend on the request.

Example:

```
HTTP/1.1 200 Ok
Content-Type: application/json
{
  "data": {
    "score": 99,
    "textualScore": "Good job!"
  }
  "links": {
    "submit", "https://tenant.acrolinx.cloud/api/v1/checks"
  }
}
```

# HTML fields

Responses may have fields, that contain HTML snippets to provide nice formatting in interactive clients. Those fields are clearly marked by a name that ends with Html, e.g. guidanceHtml. There may be related field with the same content in plain text. If such a field exists, it ends with Text as e.g. guidanceText.

All HTML fields contain only undangerous formatting tags that can be used without security risks. All tags are filtered by  server side whitelist.

# Group Index

## Index [GET /api/v1]

Note: This is the only web service method that provides a 200 response if no auth token was sent.
If an invalid auth token was sent, the response is still a 401, though.

+ Request

    + Header

            X-Acrolinx-Auth: ""


+ Response 200 (application/json)

        {
          "data": {
            "server": {
                "version": "5.1.0",
                "build": "12175",
                "name": "Acrolinx Cloud instance for Tenant"   // TODO: DEV-15235: configurable string, or externalBaseUrl, or ...?
            },
            "locales": [ "en" ],
            "settings": {
                "useLegacyResultDialog": true
            }
          },
          "links": {
            "login": "https://tenant.acrolinx.cloud/api/v1/auth/login"
            }
        }


+ Request

    + Header

            X-Acrolinx-Auth: 123579080a8d1fee12490a90dc3


+ Response 200 (application/json)

        {
          "data": {
            "server": {
                "version": "5.4.0",
                "build": "12175",
                "name": "Acrolinx Cloud instance for Tenant"
            },
            "locales": {
                "en"
            },
            "settings": {
                "useLegacyResultDialog": true
            }
          },
          "links": {
            "login": "https://tenant.acrolinx.cloud/api/v1/auth/login",  // TODO: scoped/namespaced link keys to address Stefan's fears of URL overload?
            "logoff": "https://tenant.acrolinx.cloud/api/v1/auth/logoff",
            "checking": "https://tenant.acrolinx.cloud/api/v1/checking",
            "terminology": "https://tenant.acrolinx.cloud/api/v1/terminology",
            "findability": "https://tenant.acrolinx.cloud/api/v1/findability"
          }
        }


+ Response 401 (application/json)

        {  // if provided auth token became invalid
          "error": {
            "type": "invalid_token",
            "title": "Invalid auth token",
            "detail": "The provided token for authorization is expired.",
            "status": 401
          },
          "links": {}
        }

# Group Authentication API

Authentication is handled either with a configured access token, with Single-Sign-On (SSO) or in an interactive process by signing in with the Acrolinx sign-in web page.
Headless clients use either the configured access token or SSO.
Interactive clients with a human user use SSO or the interactive process.

## Request/Validate an API Token [POST /api/v1/auth/sign-ins]

The sing-in collection allows Acrolinx API clients to request user authentication and to check
the validity and privileges of existing authorization tokens.

If the Core Platform is configured for Single Sign-on, this endpoint will accept the configured credentials
to authenticate the request.

+ Request (application/json)

    + Header

            X-Acrolinx-Auth: 123579080a8d1fee12490a90dc3 (valid) OR (invalid/expired auth token) OR (no auth token)
            X-Acrolinx-Client-Locale: ja
            X-Acrolinx-Client: QWxlU2hNyb2bHVnLWlunhQyR29Rm9xpbvZ2lZXRz; 1.0.1.45; 12345

+ Response 200 (application/json)
    No sign-in needed, the response body will contain valid authorization tokens.

    The server may decide that the request is already sufficiently authorized. In this case,
    no sign-in process is started. The response will contain the same information as after
    successful sign-in procedure. The following conditions may lead to this response:

    - The `X-Acrolinx-Auth` header contained a valid token.
    - Single Sign-on is configured and valid credentials are supplied.

    + Body
    + Attributes
        + data
          + `state`:`Success` (string,required)
          + `authToken`: `123579080a8d1fee12490a90dc3` (string, required)
          + `authorizedUsing`: `ACROLINX_SIGN_IN` (enum[string], required)
             + Members
                + `ACROLINX_SIGN_IN` - Authorized by the user signing in via the Acrolinx Sing-in website.
                + `ACROLINX_TOKEN` - Authorized by a token provided with the request.
                + `ACROLINX_SSO` - Authorized by single sign-on credentials provided with the request.
          + `privileges`: CheckingAndClients.checkingApplications, CheckingAndClients.submitDictionaryEntry (array[string], required)
          + `userId`: `fred` (string, required)
        + `links` (optional)
            + `user`: `https://tenant.acrolinx.cloud/api/v1/user/fred` (string, optional)


+ Response 201 (application/json)
    If the `X-Acrolinx-Auth` header is absent a
    new sign-in process is started. The response body contains two links.
    One allows the user to complete the sign-in process.
    The other helps the client to acquire the session data:

    - `interactive` a link to a website that allows the user to authenticate and
          permit the client to access the server. If a language was provided in the
          `X-Acrolinx-Client-Locale` header, the link will point to a localized
          version of that website if available and technically possible.

    - `poll` a link to a resource that will return an *Auth Token* and information
          about the user after sign-in. (see [GET `api/v1/auth/sign-ins/{id}`](#authentication-api-poll-for-a-new-api-token-get))

    Note that the sing-in process will time out. The `interactiveLinkTimeout` field
    contains the duration in seconds, that the `interactive` link will stay valid. If the
    Sign-in page was loaded before this time, the server will extend
    the timeout. To detect timeouts after opening the Sign-in page use the `poll` link.

    + Body

            {
              "data": {
                "state": "Started",
                "interactiveLinkTimeout": 900
              },
              "links": {
                  "interactive": "https://tenant.acrolinx.cloud/dashboard.html?login=19901-2-8412998412",
                  "poll": "https://tenant.acrolinx.cloud/api/v1/auth/sign-ins/185-0ijfgklejt2390tui"
              }
            }

    + Attributes
        + data
          + `state`:`Started` (string,required)
          + `interactiveLinkTimeout`: 900 (number,required)
        + links
            + `interactive`: `https://tenant.acrolinx.cloud/dashboard.html?login=19901-2-8412998412` (string, required)
            + `poll`: `https://tenant.acrolinx.cloud/api/v1/auth/sign-ins/185-0ijfgklejt2390tui` (string, required)

+ Response 401 (application/json)
    If invalid SSO credentials are supplied the request is rejected. This occurs when an SSO username
    is present but the SSO password is wrong or missing or the user couldn’t be created.

    + Header

            WWW-Authenticate: ACROLINX_TOKEN, ACROLINX_SIGN_IN (, ACROLINX_SSO)

    + Attributes (ErrorResponse)

+ Response 503
    The server is unable to start a sign-in process at this time.

    + Header

            Retry-After: 30

    + Attributes (ErrorResponse)

## Poll for a New API Token [GET /api/v1/auth/sign-ins/{id}]

This resource lets a client wait for a user to authenticate and authorize it to use the
privileged parts of the Acrolinx API. Once the user has completed the sign-in process,
it will return a new authorization token. It can be sent with each API call to prove the
privileges and identity owned by the user that signed in.

When polling returned a final result, the polling endpoint will disappear and return a `NOT FOUND` status.

+ Request

    + Header

            X-Acrolinx-Client: QWxlU2hNyb2bHVnLWlunhQyR29Rm9xpbvZ2lZXRz; 1.0.1.45

+ Parameters
    + id: `99576707-ed8c-44b6-82b8-c3ced8f349d1` (string, required) - poll-id for the authorization request

+ Response 200 (application/json)
   A user has completed the sign-in process and the server has created a new authorization token.

   Note that this resource will disappear after this response.

   + Attributes (Authorization Response)

+ Response 202 (application/json)
   The user has not authorized the sing-in yet. Request the same URI again to continue polling.
   Note that clients should pace themselfs by respecting the `Retry-After` header.

    + Header

            Retry-After: 2

    + Attributes
        + progress
           + `retryAfter`: 2 (number,required)

+ Response 404 (application/json)
    The server has no knowledge of the polling token. If a valid poll URI was used, the cause for this is
    a timeout or another poll request may have consumed the credentials.

    The returned type is `interactive_sign_in_timed_out`, which distinguishes this response from a normal 404 caused by a just wrong URL.

    + Attributes
       + error
         + `type`: `interactive_sign_in_timed_out` (string,required)
         + `status`: 404 (number,required)
         + title: `The interactive sign-in process timed out` (string,required)
         + detail: `The interactive sign-in process timed out. Please start a sign-in.` (string,required)

# Group User API

Here, a user is an entity that has a sign-in name, first/last name, privileges, custom properties (set by client), and custom user information.
TODO: This may throw together too many concepts at once?

When custom user information is _required_:
* Interactive clients: This will already be handled via Acrolinx sign-in. Immediately before granting
access to client, the user needs to fill out their custom user information. It’s thus impossible to obtain an
auth token for a user with incomplete required custom user information.
* Headless (API key-based) clients: Dashboard access handles this. After logging in to the dashboard,
the user needs to fill out their custom user information before getting to the actual dashboard. API tokens can only be obtained
in the dashboard for the logged-in user. It’s thus impossible to obtain an API token for a user with incomplete required custom user information.
* TODO: If you enable 'require UMD' in the dashboard, should this invalidate all API tokens and auth tokens at that point?

## User Resource [/api/v1/user/{id}]

+ Parameters
    + id: `fred` (required, string) ... the user ID

### Get User [GET]

+ Response 200 (application/json)

        {
          "data": {
            "id": "fred",
            "name": "fred",  // Acrolinx login name (user ID) - TODO: is this already a suitable ID?
            "firstName": "Fred",   //
            "lastName": "Freelancer", //
            "tenantId": "smarttech",
            "privileges": [ "CheckingAndClients.checkingApplications", "CheckingAndClients.submitDictionaryEntry", "UserAndRoles.read" ],
            "properties" : {
                "customkey": "customvalue",
            },
            "metadata":
            {
                "displayName": "Department",
                "key": "department",
                "value": "IT",
                "possibleValues": [],
                "default": null
            }
          }
        }

+ Response 403 (application/json)

        // if auth token does not permit to show the user's data
        {
          "error": {
            "detail": "You are not allowed to perform this operation.",
            "title": "Not allowed",
            "status": 403
            "type": "not_allowed"
          }
        }

### Update User [PUT]

TODO: Which user information can be updated with this call? Are partial updates allowed?

+ Request (application/json)

        {
            "firstName": "Freddy",
            "lastName": "McFredFace",
            "privileges": [ "CheckingAndClients.checkingApplications", "CheckingAndClients.submitDictionaryEntry" ],
            "properties" : {
                "customkeynew": "customvaluenew",
            },
            "metadata":
            {
                "key": "department",
                "value": "Manager",
            }
        }


+ Response 200 (application/json)

        {
          "data": {
            "id": "fred",
            "name": "fred",
            "firstName": "Freddy",
            "lastName": "McFredFace",
            "tenantId": "smarttech",
            "privileges": [ "CheckingAndClients.checkingApplications", "CheckingAndClients.submitDictionaryEntry" ],
            "properties" : {
                "customkeynew": "customvaluenew",
            },
            "metadata":
            {
                "displayName": "Department",
                "key": "department",
                "value": "Manager",
                "possibleValues": [],
                "default": null
            }
          }
        }

+ Response 403 (application/json)

   + Attributes (ErrorResponse)

# Group Document API

Here, a document is an entity that associates names/characteristics that identify a document with an ID. It also contains the custom document information.

TODO: What about the document display title? Set by client here? Extracted by server here? Extracted by server later during check, that is, not part of document entity?

TODO: How does this relate to the Content Groups in the reporting database? Is it orthogonal?

## Create or Retrieve Document ID [POST /api/v1/document/_search{?forceNew}]

In this method, fields in payload are used to (a) associate ID with document info, (b) search for existing ID that matches given fields.

* Parameters
    * forceNew: `true` (optional, boolean) ... create a new document ID even if there’s a matching existing document

        Default: false

+ Request (application/json)

        {
            "reference": "C:\\abc.docx",        // optional; if absent, forceNew is implicitly true (=no searching)
            "mimeType": "application/word",     // optional; absent means "unknown" and matches only "unknown"
            "author": "Ralf",                   // optional; absent means "unknown" and matches only "unknown"
            "contentType": "E-Mail",            // optional; absent means "unknown" and matches only "unknown"
            "displayInfo": {                    // optional information about the document; stored but not used for identification
                "reference": "abc.docx"         // optional, default: document.reference
            }
        }

+ Response 200 (application/json)

        {
          "data": {
            "id": "283ab1e075f21a",
            "reference": "C:\\abc.docx",
            "mimeType": "application/word",
            "author": "Ralf",
            "contentType": "E-Mail",
            "customFields": [
                {
                    "displayName": "Project ID",
                    "key": "projectId",
                    "value": null,
                    "required": true
                }
            ],
            "displayInfo": {
                "reference": "abc.docx"
            }
          }
        }

## Put/Update Document [PUT /api/v1/document/{id}]

+ Request (application/json)

        {
            "reference": "C:\\abc.docx",
            "mimeType": "application/word",
            "author": "Ralf",
            "contentType": "E-Mail",
            "customFields": [
                {
                    "key": "projectId",
                    "value": "Marketing Campaign"
                }
            ],
            "displayInfo": {
                "reference": "abc.docx"
            }
        }


+ Response 200 (application/json)

        {
          "data": {
            "id": "283ab1e075f21a",
            "reference": "C:\\abc.docx",
            "mimeType": "application/word",
            "author": "Ralf",
            "contentType": "E-Mail",
            "customFields": [
                {
                    "displayName": "Project ID",
                    "key": "projectId",
                    "value": "Marketing Campaign",
                    "required": true
                }
            ],
            "displayInfo": {
                "reference": "abc.docx"
            }
          }
        }



# Group Content Encodings - DEV-11069

In the proposal below, the document is embedded as a JSON string in the "content" field. The `contentEncoding` field determines how the field is used. With `contentEncoding=none`, the document text is embedded as-is. It needs to be encoded in the same way as the entire HTTP request, and it must not contain BOMs. Use any of the other contentEncodings (for example, base64) for binary documents or plain text documents that have a different encoding than the HTTP request encoding and/or that have a BOM. In this case, it’s up to the server to preserve the byte stream (for binary formats), and to guess the charset correctly (for text formats).

TODO: For text documents (plain text/HTML/XML), we may need a way for the client to specify the charset explicitly instead letting the server guess it, because the returned offsets refer to the (decoded) content string.

TODO: XML documents can include their own charset in the header - not sure whether we want to respect that, and what happens if this contradicts the BOM and/or the charset explicitly sent by the client.

TODO: An alternative approach would be to offer multipart/mixed requests, such that the client can just send the request as byte stream in a second part (first part contains the JSON request entity without the document contents). Advantage: could send more files at once in the future; can rely on HTTP standards for specifying the encoding etc. Disadvantages:  multipart/mixed may be more difficult for some clients, and HTTP doesn’t support sending compressed requests.

TODO: For the record: The current 5.2 server expects the document contents to be embedded as JSON string, with the same encoding as the request encoding, and without any BOMs. Exception: for inputFormat=PDF, the (binary) document contents must be sent base64-encoded.

# Group Checking API

The API for checking documents.

## List All Checking Methods [GET /api/v1/checking]

TODO: Do we need this entrance point? We could move 'capabilities' and 'submit' to the index.

+ Response 200 (application/json)

        {
          "data":{}
            "inputFormats": [] // TODO: why is this here again?
          },
          "links": {
            "submit_check": "https://tenant.acrolinx.cloud/api/v1/checking/submit",
            "checking_capabilities": "https://tenant.acrolinx.cloud/api/v1/checking/capabilities",
          }
        }

## List Checking Capabilities [GET /api/v1/checking/capabilities]

The new checking API replaces writing guides and Content Profiles with a flat list of "audiences". Each audience corresponds to a
writing guide or a Checking Profile. If sublanguages are activated, they are folded into the list of audiences.

For each audience, the server provides information about the language, activated goals and term sets. The client may use this
for filtering purposes, but they can only select one (complete) audience for checking (e.g. not deselect goals).

TODO: do clients need to be able to select individual term sets, or can this configuration be moved to the server-side?

+ Response 200 (application/json)

        {
          "data": {
            "audiences": [
                {
                    "id": "aud-1",
                    "displayName": "Tom the Technical Type",
                    "language": {
                        "displayName": "English (Great Britain)"
                    },
                    "goals": [{
                        "id": "spelling",
                        "displayName": "Spelling",
                        "color": "#f21"
                    },
                    {
                        "id": "voice.readability",
                        "displayName": "Clarity",
                        "color": "#f22"
                    },
                    {
                        "id": "term.unsuitable",
                        "displayName": "Unsuitable Term",
                        "color": "#f23"
                    },
                    {
                        "id": "term.admitted",
                        "displayName": "Use with caution",
                        "color": "#f24"
                    }],
                    "termSets": [{
                        "displayName": "Switches"
                    },
                    {
                        "displayName": "Acrolinx"
                    }]
                },
                {
                    "id": "aud-2",
                    "displayName": "Randolf Redakteur",
                    "language": {
                        "displayName": "German"
                    },
                    "goals": [{
                        "id": "spelling",
                        "displayName": "Spelling",
                        "color": "#f21"
                    }],
                    "termSets": []
                }
            ],
            "contentFormats": [
                {
                    "id": "auto",
                    "displayName": "Automatic Detection"   // TODO: what do we do with this again?
                },
                {
                    "id": "text",
                    "displayName": "Plain Text"
                },
                {
                    "id": "markdown",
                    "displayName": "Markdown"
                },
                {
                    "id": "xml",
                    "displayName": "XML"
                },
                {
                    "id": "word_xml",
                    "displayName": "XML (MS Word 2003)"
                }
            ],
            "contentEncodings": [ "none", "zip,base64", "base64" ],
            "checkTypes": [ "batch", "partial", "interactive" ],
            "reportTypes": ["scorecard_xml", "scorecard_html", "debug", "termharvesting"]
          }
        }

##  Submit a Check [POST /api/v1/checking/checks]

This call includes an implicit "create/search for document" (in case no document ID was given) and "update document" (in case document ID was given).

+ Request (application/json)

        {
            "content": "text to check",                  // required
            "contentEncoding": "zip,base64",             // optional, default: none = HTTP request encoding
            "checkOptions": {
                "audienceId": "aud-1",                       // optional, default: first audience
                "reportTypes": ["debug", "termharvesting"],  // optional, default: scorecard_html
                "contentFormat": "word_xml",                 // optional, default: auto
                "checkType": "partial",                      // optional, default: interactive, the priority of the check
                "partialCheckRanges": [{ "begin": 10, "end": 20 }, { "begin": 40, "end": 70 }],   // only used when checkType=partial
                "batchId": "gen.clc.159203590",                      // only for batch checks; optional;
                "disableCustomFieldValidation": true                 // no checking of Document Meta Data, mostly for batch checks; optional;
            },
            "document": {                                // optional, default: empty "document" object
                "id": "283ab1e075f21a",                  // optional; if present: update with following non-null infos (if any); if absent: search for or create ID with following infos
                "reference": "C:\\abc.docx",              // optional, default: do not search for ID, always create
                "mimeType": "application/word",
                "customFields": [                       // optional
                    {
                        "key": "field1",
                        "value": "value1"
                    },{
                        "key": "field2",
                        "value": "value2"
                    }
                ],
                "displayInfo": {                          // optional information about the document; stored but not used for identification
                    "reference": "abc.docx"               // optional, default: document.reference, used to choose file names
                }
            }
        }

+ Response 201 (application/json)

        {
          "data": {
            "id": "AB-153",
            "batchId": "159203590",
            "document": {
                "id": "283ab1e075f21a",
                "customFields": [
                    {
                        "displayName": "Project ID",
                        "key": "projectId",
                        "value": "Marketing Campaign",
                        "required": true
                    }
                ],
            }
          },
          "links": {
              "status": "https://tenant.acrolinx.cloud/api/v1/checking/153/status",
              "cancel": "https://tenant.acrolinx.cloud/api/v1/checking/153"
          }
        }

+ Response 400 (application/json)

        {
          "error": {
            "message": "Custom field values are missing",
            "type": "custom_fields_incomplete",
            "document": {
                "id": "283ab1e075f21a",
                "customFields": [
                    {
                        "displayName": "Project ID",
                        "key": "projectId",
                        "value": null,
                        "required": true
                    }
                ],
            }
          },
          "links": {
          }
        }

+ Response 400 (application/json)

        {
          "error": {
            "message": "The specified audience is currently not available.",
            "type": "com.acrolinx.faults.AudienceUnavailable",
            "capabilities": {
                // "audiences": { ... },
                // "languages": { ... },
                // etc.
                // i.e. exactly the response of the "get capabilities" web service method
                // when calling it with same credentials
            }
          },
          "links": {
              "submit_check": "https://tenant.acrolinx.cloud/api/v1/checking/submit",
              "checking_capabilities": "https://tenant.acrolinx.cloud/api/v1/checking/capabilities"
          }
        }


## Cancel Check [DELETE /api/v1/checking/checks/{id}]

+ Parameters
    + id: `153` (required, number) ... the check id

+ Response 204


## Get Check Result [GET /api/v1/checking/checks/{id}]

+ Parameters
    + id: `AB-153` (required, string) ... the check id

+ Response 201 (application/json)

    + Headers

            Retry-After: 2

    + Body

            {
              "progress" : {
                "percent": 20,
                "message": "Waiting in queue",
                "retryAfter": "2"
              }
            }

+ Response 200 (application/json)

        {
          "data":{
            "id": "AB-153",
            "checkOptions": {
                "audienceId": "aud_1",
                "audienceName": "Acrolinx Essentials",
                "languageId": "en",
                "termSets": [{
                    "displayName": "Switches"
                },
                {
                    "displayName": "Acrolinx"
                }],
                "reportTypes": ["scorecard", "termharvesting"],
                "contentFormat": "word_xml",
                "checkType": "partial",
                "partialCheckRanges": [{ "begin": "10", "end": "20" }, { "begin": "40", "end": "70" }]
            },
            "document": {
                "id": "283ab1e075f21a",
                "reference": "C:\\abc.docx",
                "mimeType": "application/word",
                "author": "Ralf",
                "contentType": "E-Mail",
                "customFields": [
                    {
                        "displayName": "Project ID",
                        "key": "projectId",
                        "value": "Marketing Campaign",
                        "required": true
                    }
                ],
                "displayInfo": {
                    "reference": "abc.docx"
                }
            },
            "quality": {
                "score": 57,
                "status": "red"   // TODO: which values are allowed?
            },
            "counts": {
                "sentences": 10,
                "words": 121,
                "issues": 15
            },
            "goals": [
                {
                    "id": "spelling",
                    "displayName": "Spelling",
                    "color": "#f21",
                    "issueCount": 13,
                },
                {
                    "id": "voice.readability",
                    "displayName": "Clarity",
                    "color": "#f22",
                    "issueCount": 2,
                },
                {
                    "id": "term.unsuitable",
                    "displayName": "Unsuitable Term",
                    "color": "#f23",
                    "issueCount": 0
                }
            ],
            "issues": [
                {
                    "goalId": "spelling",
                    "internalName": "title_case_chicago",
                    "displayNameHtml": "Use Chicago style for the title case?",
                    "guidanceHtml": "<div class=\"shortHelp\" lang=\"en\" xml:lang=\"en\">\n<p>According to the <q>Chicago Manual of Style</q>, here's how you write titles:</p>\n<ul>\n<li>Capitalize the first word and the last word.</li>\n<li>Capitalize all \"main\" words.</li>\n<li>Don't capitalize articles and conjunctions (example: <q>a</q>, <q>and</q>).</li>\n<li>Don't capitalize prepositions independent of their length (example: <q>about</q>, <q>around</q>).</li>\n</ul>\n</div>",
                    "extractedSurface": "zentense",
                    "positionalInformation": {
                        "hashes": {           // TODO: positional info? groupId grouped flags based on type (e.g. all flags of a rule), but issue hash just groups internalName+extractedSurface
                            "issue": "BhKh3iaGBjB7Cw6M/GwrLQ==",
                            "environment": "vJ9eCVViEpIdM76h+5K/nA==",
                            "index": "hjlRLT0K+LlvlslKdNUlhw==1"
                        },
                        "matches": [{
                            "extractedPart": "zen",
                            "extractedBegin": 30,
                            "extractedEnd": 33,
                            "originalPart": "zen",
                            "originalBegin": 19247,
                            "originalEnd": 19255
                        }, {
                            "extractedPart": "te",
                            "extractedBegin": 33,
                            "extractedEnd": 35,
                            "originalPart": "&te;",
                            "originalBegin": 19250,
                            "originalEnd": 19254
                        },{
                            "extractedPart": "nse",
                            "extractedBegin": 35,
                            "extractedEnd": 38,
                            "originalPart": "nse",
                            "originalBegin": 19254,
                            "originalEnd": 19257
                        }]
                    },
                    "readonly": true,
                    "issueLocations": [
                        {
                            "locationId": "pageLocation",
                            "displayName": "Page 4",
                            "values": { "page": "4" }
                        }
                    ],
                    "suggestions": [
                        {
                            "surface": "sentence",
                            "groupId": "sentence",
                            // the replacements refer to the matches entry of the same Index
                            // null means, don't change, any other value including the empty string means, replace the match
                            "replacements": ["sen",null,"nce"]
                            }
                        }
                    ],
                    "actions": [
                        {
                            "id": "help",
                            "url": "https://tenant.acrolinx.cloud/htmldata/en/rules/help/title_case_chicago.html",
                            "displayName": "Help",
                            "icon": "help-icon"
                        },
                        {
                            "id": "termContributionForm",
                            "url": "https://tenant.acrolinx.cloud/termcontribution.html?surface=@@base64:cXdlcnR5dWlvcA==&locale=en&language=en&userid=admin&context=@@base64:VGhpcyBzZW50ZW5jZSBoYXMgYSBxd2VydHl1aW9wLg==#",
                            "displayName": "Add as Term",
                            "icon": "icon-term-contribute",
                            "replacedBy": "termContribution"
                        }
                    ],
                    "links":
                        {
                            "termContribution": "https://tenant.acrolinx.cloud/terminology/v7/rest/contribute",
                            "addToDictionary": "https://tenant.acrolinx.cloud/api/v1/dictionary/submit"
                        }
                },
                {
                    "goalId": "term.unsuitable",
                    "internalName": "term_flag",
                    "displayName": "<b>Illegal sublanguage variant</b> of preferred term",
                    "guidance": "<div class=\"guidance term\">\n\t<b>Domains</b>\n\t\t\t<br/><i>Switches</i>\n\t\t\t\t\t<br/>\n\t\t<b>Note</b>\n\t\t<br/>\n\t\tUse &#39;please&#39; in presale materials only. Do NOT use &#39;please&#39; in postsale material.\n\t</div>\n",
                    "extractedSurface": "Please",
                    "positionalInformation": {
                        "hashes": {
                            "issue": "3qyt/AVxwNTOUQSuMA7brw==",
                            "environment": "TiwIFBwA6X920mDAezJTyQ==",
                            "index": "Lm9PqBGGm+tj21rt3pkpjA==1"
                        },
                        "matches": [{
                            "extractedPart": "Please",
                            "extractedBegin": 766,
                            "extractedEnd": 772,
                            "originalPart": "Please",
                            "originalBegin": 28223,
                            "originalEnd": 28229,
                        }],
                    },
                    "readonly": false,
                    "issueLocations": [],
                    "suggestions": [
                        {
                            "surface": "blablub",
                            "icon": "https://tenant.acrolinx.cloud/tng/icons/preferred.svg", // TODO: icon class+url?
                            "groupId": "2653",
                            "replacements": ["blablub" ]
                            }
                        }
                    ],
                    "actions": [
                        {
                            "id": "help",
                            "url": "https://tenant.acrolinx.cloud/termhelp?termUniversalId=9c2e9ffb-a314-4b61-94b2-d62db3c18945&locale=en",
                            "displayName": "Help",
                            "icon": "help-icon"
                        }
                    ],
                    "debug": {
                        "term": {
                            "surface": "please",
                            "status": "DEPRECATED",
                            "termSets": ["RA-Terms"],
                            "domains": ["RA-Terms"],
                            "variant": "legalVariantIllegal",
                        }
                    }
                },
                {
                    "goalId": "voice.readability",
                    "internalName": "en-clarity-medium",
                    "displayName": "Too complex? Your readers need a medium level of clarity. ",
                    "guidance": "",
                    "extractedSurface": "Reports ... length",
                    "positionalInformation": {
                        "hashes": {
                            "issue": "E3OxJ3bFcfWLyAisUxufAA==",
                            "environment": "XVYQZVyCoFOr1TDeyXuMgg==",
                            "index": "accsS0dbn/3rafcbT9NJGw==1"
                        },
                        "matches": [{
                            "extractedPart": "Reports",
                            "extractedBegin": 1360,
                            "extractedEnd": 1367,
                            "originalPart": "Reports",
                            "originalBegin": 33173,
                            "originalEnd": 33180,
                        }, {
                            "extractedPart": "length",
                            "extractedBegin": 1749,
                            "extractedEnd": 1755,
                            "originalPart": "length",
                            "originalBegin": 33562,
                            "originalEnd": 33568,
                        }]
                    },
                    "suggestions": [],
                    "issueLocations": [],
                    "readonly": false,
                    "debug": {
                        "penalty": 1234.0967741949999
                    },
                    "subIssues": [{
                        "goalId": "voice.readability",
                        "internalName": "phenomenon_embedded_or_complex_sentence",
                        "displayName": "Try to split up this sentence.",
                        "guidance": "<p>This sentence doesn't seem to flow smoothly. We found a few embedded phrases in there that could be messing with your flow somehow.</p>",
                        "extractedSurface": "Reports ... length",
                        "positionalInformation": {
                            "hashes": {
                                "issue": "7s1nqUN96X+P6VY4FlfSQQ==",
                                "environment": "XVYQZVyCoFOr1TDeyXuMgg==",
                                "index": "++0c1Z/OQu1Mwzt0KpkYYA==1"
                            },
                            "matches": [{
                                "extractedPart": "Reports",
                                "extractedBegin": 1360,
                                "extractedEnd": 1367,
                                "originalPart": "Reports",
                                "originalBegin": 33173,
                                "originalEnd": 33180,
                            }, {
                                "extractedPart": "length",
                                "extractedBegin": 1749,
                                "extractedEnd": 1755,
                                "originalPart": "length",
                                "originalBegin": 33562,
                                "originalEnd": 33568,
                            }]
                        },
                        "suggestions": [],
                        "issueLocations": [],
                        "readonly": false,
                        "debug": {
                            "penalty": 320.0
                        }
                    }, {
                        "goalId": "voice.readability",
                        "internalName": "phenomenon_passive",
                        "displayName": "The active voice is usually clearer.",
                        "guidance": "<p>This one could do with a bit of pep. It's probably because it feels kind of passive. We love it when you're assertive.</p>",
                        "extractedSurface": "was first seen",
                        "positionalInformation": {
                            "hashes": {
                                "flag": "dg+ih1XodWeL7lJ/wo17QQ==",
                                "environment": "XVYQZVyCoFOr1TDeyXuMgg==",
                                "index": "fOJLASZHiwnwcJWcfbkXnw==1"
                            },
                            "matches": [{
                                "part": "was",
                                "begin": 33219,
                                "end": 33222,
                                "extractedBegin": 1406,
                                "extractedEnd": 1409
                            }, {
                                "part": "first",
                                "begin": 33223,
                                "end": 33228,
                                "extractedBegin": 1410,
                                "extractedEnd": 1415
                            }, {
                                "part": "seen",
                                "begin": 33229,
                                "end": 33233,
                                "extractedBegin": 1416,
                                "extractedEnd": 1420
                            }]
                        },
                        "suggestions": [],
                        "issueLocations": [],
                        "readonly": false,
                        "debug": {
                            "penalty": 40.0
                        }
                    }]
                }
            ],
            "keywords": {
                "links":{
                    "getTargetKeywords": "https://tenant.acrolinx.cloud/services/v1/rest/findability/targetKeywords?contextId=C%3A%5CUsers%5Cgrabowski%5CDesktop%5Ccloud-linguistic-smoketest.docx",
                    "putTargetKeywords": "https://tenant.acrolinx.cloud/services/v1/rest/findability/targetKeywords?contextId=C%3A%5CUsers%5Cgrabowski%5CDesktop%5Ccloud-linguistic-smoketest.docx"
                },
                "discovered": [{
                    "keyword": "Clarity card",
                    "sortKey": "10",
                    "density": 0.2546269436736127,
                    "count": 4,
                    "prominence": 0.0,
                    "occurrences": [{
                        "matches": [
                        // ...
                        ]
                    }],
                    "warnings": []
                }],
                "target": []
            },
            "extraInfos": [
                {
                    "id": "rioseo",
                    "title": "IBM KIS",
                    "iconClass": "search-icon",
                    "iconUrl": "...",
                    "url": "https://kis.example.com/info?projectId=52351235"
                }
            ],
            "reports": {
                "scorecard": {
                    "displayName":"Score Card",
                    "link": "https://tenant.acrolinx.cloud/output/en/abcdef_1_report.html",
                    "linkAuthenticated": "https://tenant.acrolinx.cloud/output/en/abcdef_1_report.html?apikey=hfhfzhfhrz"
                },
                "termharvesting": {
                    "displayName": "Term Harvesting",
                    "link": "https://tenant.acrolinx.cloud/output/en/termharvesting_1.xml",
                    "linkAuthenticated": "https://tenant.acrolinx.cloud/output/en//termharvesting_1.xml?apikey=tfhzzhfhrz"
                }
            },
            "actions": [
                {
                    "id": "termContributionForm",
                    "url": "https://tenant.acrolinx.cloud/termcontribution.html",
                    "displayName": "Add as Term",
                    "icon": "icon-term-contribute",
                    "replacedBy": "termContribution"
                }
            ]
          },
          "links": {
                "termContribution": "https://tenant.acrolinx.cloud/terminology/rest/v7/contribute",
                "deleteScorecard": "https://tenant.acrolinx.cloud/api/v1/checking/153/result"
          }
        }

## Get Link to Aggregated Report [GET /api/v1/checking/aggregation/{batchId}]

Returns the links to a human readable Analytics Dashboard, which aggregates information of all checks belonging to the given batch id. Requires the Reporting.read privilege. The link with API key contains a new privilege token with the right Reporting.read.

+ Parameters
    + batchId: `XYZ-10-22-33` (required, string) ... the batch check id

+ Response 200 (application/json)

        {
            "reports": [
                {
                    "reportType": "withoutApiKey",
                    "link": "https://tenant.acrolinx.cloud/analytics/dashboard/app/entry/run.jsp?jrd_resext=%7Bactive%3A0%2Creslst%3A%5B%7Bname%3A%22%2FAcrolinxReports%2Fstandard%2FContent+Analysis.dsh%22%2C%22param_page%22%3Afalse%2Cver%3A-1%2C%22dsh_params%22%3A%5B%7B%22jrd_params%22%3A%7B%22BatchId%22%3A%22_nice_batch_id_88-xyz%22%2C%22CsBaseUrl%22%3A%22http%3A%2F%2Flocalhost%3A8031%22%2C%22CsOutputPath%22%3A%22%2Foutput%22%7D%7D%5D%7D%5D%7D&jrd_userinfo=%7B%22prefer%22%3A%7B%22rpt_lang%22%3A%22en%22%2C%22enableNLS%22%3Atrue%7D%7D&jrs.language=en"
                },
                {
                    "reportType": "withApiKey",
                    "link": "https://tenant.acrolinx.cloud/analytics/dashboard/app/entry/run.jsp?jrd_resext=%7Bactive%3A0%2Creslst%3A%5B%7Bname%3A%22%2FAcrolinxReports%2Fstandard%2FContent+Analysis.dsh%22%2C%22param_page%22%3Afalse%2Cver%3A-1%2C%22dsh_params%22%3A%5B%7B%22jrd_params%22%3A%7B%22BatchId%22%3A%22_nice_batch_id_88-xyz%22%2C%22CsBaseUrl%22%3A%22http%3A%2F%2Flocalhost%3A8031%22%2C%22CsOutputPath%22%3A%22%2Foutput%22%7D%7D%5D%7D%5D%7D&jrd_userinfo=%7B%22prefer%22%3A%7B%22rpt_lang%22%3A%22en%22%2C%22enableNLS%22%3Atrue%7D%7D&jrs.language=en&apikey=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJhZG1pbiIsImF1ZCI6ImFjcm9saW54OjA4MTEwYThjNzI3MjQzYTMiLCJuYmYiOjE1MDM5MjcyMzksImlzcyI6ImFjcm9saW54OjA4MTEwYThjNzI3MjQzYTM6NWQyNTQ2NWI5ZTA3NDNiZiIsImV4cCI6MTUwNjYwNTYzOSwidG9rZW5UeXBlIjoidXNlciIsImlhdCI6MTUwNDAxMzYzOSwianRpIjoiMmFmOTQzOWIzZDgyNzMwODAyMzMyMzEyMGRiZmRlMmYifQ.Lj0chsnnRTX7IevJNyWMMlCviA6ecYAQ0kacy5EGQz0"
                }
            ]
        }

# Group Dictionary API

This API handles the spelling dictionary, i.e. words that are ignored by the spell checker.
Here, a dictionary entry is a surface string and a language, optionally further restricted
by either an audience ID, a document ID or a user ID.

## Get Dictionary Capabilities [GET /api/v1/dictionary/capabilities]

This method enables the client to discover the supported dictionary scopes.

+ Response 200 (application/json)

        {
          "data": {
            "scopes": [ "audience", "document", "user", "language" ]
          }
        }

## Add to Dictionary [POST /api/v1/dictionary/submit]

Create a dictionary entry for the specified scope. Depending on the scope, more information is required -
the client needs to know which information it is. The response is the created dictionary entry.

+ Request (application/json)

        {
            "surface": "wiruwaruwolz",                  // required
            "scope": "document",                        // required, one of the scopes above
            "languageId": "en_GB",                      // required if scope!=audience
            "audienceId": "aud-1",                      // required if scope=audience
            "documentId": "283ab1e075f21a",             // required if scope=document
            "userId": "fred"                            // optional, default: user from auth token
        }

+ Response 200

        {
          "data": {
            "surface": "wiruwaruwolz",
            "scope": "document",
            "languageId": "en_GB",
            "audienceId": null,
            "documentId": "283ab1e075f21a",
            "userId": null
          }
        }

# Search for Dictionary Entries [POST /api/v1/dictionary/search]

This is new functionality intended to make the contents of the spelling dictionary transparent for the first time.
The dictionary entry in the request payload is used as the search criteria, where "null" fields mean "any".
The response is a list of all entries across all dictionaries where the entry fields match the non-null criteria exactly.

+ Request (application/json)

        {
            "surface": "wiruwaruwolz",
            "scope": null,
            "languageId": "en_GB",
            "audienceId": null,
            "documentId": null,
            "userId": null
        }

+ Response 200

        "data": {[
            {
                "surface": "wiruwaruwolz",
                "scope": "document",
                "languageId": "en_GB",
                "audienceId": null,
                "documentId": "283ab1e075f21a",
                "userId": null
            },
            {
                "surface": "wiruwaruwolz",
                "scope": "user",
                "languageId": "en_GB",
                "audienceId": null,
                "documentId": null,
                "userId": "fred"
            }
        ]}


# Data Structures

## Authorization Response (object)
+ data
  + `state`:`Success` (enum[string],required)
     + Members
        + `Success`
        + `Started`
  + `authToken`: `123579080a8d1fee12490a90dc3` (string, optional)
  + `authorizedUsing`: `ACROLINX_SIGN_IN` (enum[string], optional)
     + Members
        + `ACROLINX_SIGN_IN` - Authorized by the user signing in via the Acrolinx Sing-in website.
        + `ACROLINX_TOKEN` - Authorized by a token provided with the request.
        + `ACROLINX_SSO` - Authorized by single sign-on credentials provided with the request.
  + `privileges`: CheckingAndClients.checkingApplications, CheckingAndClients.submitDictionaryEntry (array[string], optional)
  + `userId`: `fred` (string, optional)
+ `links` (optional)
    + `user`: `https://tenant.acrolinx.cloud/api/v1/user/fred` (string, optional)

## View (object)
+ id: `850ec0e3-9dd2-48f0-bb9c-8ade80316584` (string)
+ displayName: `Hello World` (string, required)
+ useForChecking: false (boolean) - marks that this view is used to generate term sets
+ query: `name=match(batman)` (string, required) - a query string that may be appended to the terms resource to fetch terms in this view
+ links (optional)
    + *terms/en*: `[link to the terms collection]` (string, optional) - for each check language with terms matching the query there will be a link to the terms resource that returns these terms
+ NOT_UP_TO_DATE: yes (string, optional)

## Term (object)
+ `id`: `B4B198A5-459C-4CF9-A574-22A22F611B8A` (string)
+ `name`: `Gàidhlig` (string)
+ `languageCode`: `gd` (string)
+ `status`: `39718e03-55b5-4874-a9c2-05edd83d58cb` (string)
+ `concept`: `589E1B07-34BE-4308-A6E9-40731DCFD30A` (string)
+ NOT_UP_TO_DATE: yes (string, optional)

## ErrorResponse (object)
+ error
  - `type`: `client` (string,required)
  - `title`: `Unspecified client error` (string,required)
  - `detail`: `This is a detailled explanation, that can be displayed to the user.` (string,required)
  - `status`: `403` (string,required)
  - `reference`: `4fd78a6b-7ed2-473e-89f5-ef9562742ecb` (string,optional)

## PaginationMetadata (object)
+ `page`: `1` (number)
+ `pages`: `1` (number)
+ `limit`: `10` (number)
+ `records`: `2` (number) - total number of records in query, independent of pagination

## `Language` (object)
- `id`: `bf2b3b68-c3c2-4924-aaa3-e755f5cfd3d3` (string)
- checkedAs: en de zh (array[string], optional) - language codes that this language is checked as (not final)
- `parentLanguage`: `b0a5f8d9-9fb3-4c4d-90ea-15acad32ca11` (string)
- `name`: `hup` (string)
- `displayName`: `Hupa` (string) - use this string to represent this language in your UI
- `order`: `33` (number) - represents the visual order between siblings, not necessary continous or complete

# Group Terminology API

This API allows access to the terminology database.

## Get terminology index - not implemented [GET /api/v1/terminology]

Basic hints about what is available where in the api. Links may appear/disappear based on the authorizations in the token provided.

TODO:
+ put more stuff into the object, such as
    + languages
    + statuses (???)
    + custom fields
    + (maybe: views)
+ put more links into the object:
    + links to collections?
    + link to download all picklist options?

Not implemented!!!

+ Request
    + Header

            Auth-Token: 123579080a8d1fee12490a90dc3

+ Response 200 (application/json)

        {
            "links": {
                "termsets": "https://tenant.acrolinx.cloud/api/v1/terminology/views?useForChecking=match(true)"
            }
        }

## View resource [/api/v1/terminology/views/{id}]

TODO

## Get Views [GET /api/v1/terminology/views{?useForChecking,sort,p,limit}]

Returns a list of stored views, visible to the authenticated client.

+ Parameters
    + useForChecking: `match(true)` (enum[string], optional)
        Filters views by their "useForChecking" attribute.

        See XXX for a general description on how filtering works in Acrolinx REST-APIs.
        + Members
            + `match(true)`
            + `match(false)`
    + sort: `displayName` (enum[string], optional)
        Specifies the order in which the views appear in the result.

        See XXX for a general description on how sorting works in Acrolinx REST-APIs.
        + Members
            + `displayName`
    + p: `1` (number, optional) - Result page if a limit is given. Starts with 1.
    + limit: `10` (number, optional) - Maximum number of results per page.

+ Request
    + Header

            Auth-Token: 123579080a8d1fee12490a90dc3

+ Response 200 (application/json)

        {
          "data": {
            "view": [
                {
                    "id": "850ec0e3-9dd2-48f0-bb9c-8ade80316584",
                    "displayName": "Marketing",
                    "useForChecking": true,
                    "query": "[some query params]",
                    "links": {
                        "terms/en": "https://tenant.acrolinx.cloud/api/v1/terminology/terms?[some query params]&language=checkedAs(en)",
                        "terms/de": "https://tenant.acrolinx.cloud/api/v1/terminology/terms?[some query params]&language=checkedAs(de)",
                        "terms/zh": "https://tenant.acrolinx.cloud/api/v1/terminology/terms?[some query params]&language=checkedAs(zh)"
                    }
                }, {
                    "id": "850ec0e3-9dd2-48f0-bb9c-8ade80316585",
                    "displayName": "Documentation",
                    "useForChecking": true,
                    "query": "[other query params]",
                    "links": {
                        "terms/en": "https://tenant.acrolinx.cloud/api/v1/terminology/terms?[other query params]&language=checkedAs(en)",
                        "terms/de": "https://tenant.acrolinx.cloud/api/v1/terminology/terms?[other query params]&language=checkedAs(de)",
                        "terms/zh": "https://tenant.acrolinx.cloud/api/v1/terminology/terms?[other query params]&language=checkedAs(zh)"
                    }
                }
            ],
            "meta": {
            }
          }
        }

## Get view [GET /api/v1/terminology/views/{uuid}]

Returns a stored view, visible to the authenticated client.

TODO:
+ More errors

+ Parameters
    + uuid: `850ec0e3-9dd2-48f0-bb9c-8ade80316584` (string, required) - id of the returned view

+ Request
    + Header

            Auth-Token: 123579080a8d1fee12490a90dc3

+ Response 200 (application/json)
    + Attributes
        + view (View)

+ Response 404

## Create View [POST /api/v1/terminology/views]

Creates a new view. Note that the id send with the request is ignored and a new one is generated.

TODO:
+ More errors

+ Attributes
    + view (View)

+ Request (application/json)
    + Header

            Auth-Token: 123579080a8d1fee12490a90dc3

+ Response 201 (application/json)
    + Headers

            Location: https://tenant.acrolinx.cloud/api/v1/terminology/views/{uuid}

    + Attributes
        + view (View)

## Update View [PUT /api/v1/terminology/views/{uuid}]

Updates a view.

TODO:
+ More errors

+ Attributes
    + view (View)

+ Parameters
    + uuid: `850ec0e3-9dd2-48f0-bb9c-8ade80316584` (string, required) - id of the returned view

+ Request (application/json)
    + Header

            Auth-Token: 123579080a8d1fee12490a90dc3

+ Response 200 (application/json)
    + Attributes
        + view (View)

+ Response 400 (application/json)
    + Attributes
        + error (ErrorResponse)

+ Response 404

## Delete View [DELETE /api/v1/terminology/views/{uuid}]

Deletes a view.

TODO:
+ More errors (authorization)

+ Parameters
    + uuid: `850ec0e3-9dd2-48f0-bb9c-8ade80316584` (string, required) - id of the returned view

+ Request
    + Header

            Auth-Token: 123579080a8d1fee12490a90dc3

+ Response 204
+ Response 404

## Terms Resource [/api/v1/terminology/terms/{uuid}]

### Get Terms [GET /api/v1/terminology/terms/{?name,language,status,p,limit}]
Returns a list of stored terms.

+ Parameters
    + name: `match(true)` (enum[string], optional)
        Filters terms by their surface.

        See XXX for a general description on how filtering works in Acrolinx REST-APIs.
        + Members
            + `match(true)`
            + `match(false)`
    + language: `match([language-id])` (string, optional)
        Filters terms by their language.

        See XXX for a general description on how filtering works in Acrolinx REST-APIs.
    + status: `match([status-id])` (string, optional)
        Filters terms by their status.

        See XXX for a general description on how filtering works in Acrolinx REST-APIs.
    + p: `1` (number, optional) - Result page if a limit is given. Starts with 1.
    + limit: `10` (number, optional) - Maximum number of results per page.

+ Request
    + Header

            Auth-Token: 123579080a8d1fee12490a90dc3

+ Response 200 (application/json)
    + Attributes
        + term (array[Term])
        + meta (PaginationMetadata)

### Get a Term [GET /api/v1/terminology/terms/{uuid}]

Returns a single term.

TODO:
+ More errors (authorization)

+ Parameters
    + uuid: `850ec0e3-9dd2-48f0-bb9c-8ade80316584` (string, required) - id of the requested term

+ Request
    + Header

            Auth-Token: 123579080a8d1fee12490a90dc3

+ Response 200 (application/json)
    + Attributes
        + term (Term)

+ Response 404

### Create a Term [POST /api/v1/terminology/terms/]

Creates a new term.

TODO:
+ More errors (authorization, validation)

+ Attributes
    + term (Term)

+ Request (application/json)
    + Header

            Auth-Token: 123579080a8d1fee12490a90dc3

+ Response 201 (application/json)
    + Headers

            Location: https://tenant.acrolinx.cloud/api/v1/terminology/terms/{uuid}

### Update a Term [PUT /api/v1/terminology/terms/{uuid}]

Updates a term.

TODO:
+ More errors (authorization, validation)

+ Parameters
    + uuid: `850ec0e3-9dd2-48f0-bb9c-8ade80316584` (string, required) - id of the updated term

+ Attributes
    + term (Term)

+ Request (application/json)
    + Header

            Auth-Token: 123579080a8d1fee12490a90dc3

+ Response 200 (application/json)
    + Attributes
        + term (Term)

+ Response 404

### Delete a Term [DELETE /api/v1/terminology/terms/{uuid}]

Deletes a term.

TODO:
+ More errors (authorization)

+ Parameters
    + uuid: `850ec0e3-9dd2-48f0-bb9c-8ade80316584` (string, required) - id of the deleted term

+ Request
    + Header

            Auth-Token: 123579080a8d1fee12490a90dc3

+ Response 204
+ Response 404

## Languages Resource [/api/v1/terminology/languages/{uuid}]


## Get Languages [GET /api/v1/terminology/languages/]
Returns a list of all defined languages.

+ Request
    + Header

            Auth-Token: 123579080a8d1fee12490a90dc3

+ Response 200 (application/json)
    + Attributes
        + language (array[Language])
        + meta (PaginationMetadata)

# Get a Language [GET /api/v1/terminology/languages/{uuid}]

Returns a single language.

TODO:
+ More errors (authorization)

+ Request
    + Header

            Auth-Token: 123579080a8d1fee12490a90dc3

+ Parameters
    + uuid: `850ec0e3-9dd2-48f0-bb9c-8ade80316584` (string, required) - id of the requested language

+ Response 200 (application/json)
    + Attributes
        + language (Language)

+ Response 404

# Create a Language [POST /api/v1/terminology/languages/]

Creates a new language.

TODO:
+ More errors (authorization, validation)

+ Attributes
    + language (Language)

+ Request (application/json)
    + Header

            Auth-Token: 123579080a8d1fee12490a90dc3

+ Response 201 (application/json)
    + Headers

            Location: https://tenant.acrolinx.cloud/api/v1/terminology/languages/{uuid}

# Update a Language [PUT /api/v1/terminology/languages/{uuid}]

Updates a language.

TODO:
+ More errors (authorization, validation)

+ Parameters
    + uuid: `850ec0e3-9dd2-48f0-bb9c-8ade80316584` (string, required) - id of the updated language

+ Attributes
    + language (Language)

+ Request (application/json)
    + Header

            Auth-Token: 123579080a8d1fee12490a90dc3

+ Response 200 (application/json)
    + Attributes
        + language (Language)

+ Response 404

# Not Implemented [DELETE /api/v1/terminology/languages/{uuid}]

Deletes a language.

TODO:
+ More errors (authorization)

+ Parameters
    + uuid: `850ec0e3-9dd2-48f0-bb9c-8ade80316584` (string, required) - id of the deleted language

+ Request
    + Header

            Auth-Token: 123579080a8d1fee12490a90dc3

+ Response 204
+ Response 404

# Group Other Methods in Existing API - TODO

Checking API:
* Contribute as Term (may be moved to Terminology API)

Core Service:
* get broadcast messages - integrate into "index" call?
* is user self reg enabled - integrate into "index" call?
* create user - not needed right now? should be part of User API

Findability:
* get/update target keywords - may link to existing methods?
* get keyword info - maybe link to existing method for now?

ExtraInfo API:
* get extra info tab infos - maybe link to existing methods in "index" call for now?

Checking Profiles:
* get and update user settings? get and update profile user settings? what is this?

Feedback API
* submit issue feedback - will be reimplemented anyway

Reuse API
* deprecated anyway

Debug API
* not needed for now - special use case

Monitoring API
* not needed for now - special use case
