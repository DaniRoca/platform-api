FORMAT: 1A
HOST: https://tenant.acrolinx.cloud

# acrolinx
Acrolinx API is the new REST API for accessing all functionality of the Acrolinx server.

# Group Capabilities

## Index [/api/v1]
### List all [GET]

+ Response 200 (application/json)

        {
            "server": {
                "version": "5.2.1",
            },
            "links": [
                "checking": "https://host:port/api/v1/checking",
                "terminology": "https://host:port/api/v1/terminology",
                "findability": "https://host:port/api/v1/findability",
            ],
            "locales": {},
            "settings": {
                "useLegacyResultDialog": true
            }
        }

+ Response 401 (application/json)

        {
            "message": "Bla",
            "type": "com.acrolinx.faults.NoSuchAuthTokenFault",
            "links": {
                "login": "https://host:port/api/v1/authenticate"
            }
        }

# Group Authentication

See unified authentication: DEV-10327

# Group User Metadata
Might be handled via unified authentication, plese check AEM / Apple proxy case.


# Group Checking
## List all checking methods [GET /api/v1/checking]

* Response 200 (application/json)

        {
            "inputFormats": [], // why is this here again?
            "links": {
                "submit": "https://host:port/api/v1/checking/submit",
                "capabilities": "https://host:port/api/v1/checking/capabilities",
            }
        }



## List checking capabilities [GET /api/v1/checking/capabilities]

* Response 200 (application/json)

        {
            "audiences": [
                {
                    "id": "aud-1",
                    "displayName": "Tom the Technical Type",
                    "language": "en_GB",
                    "goals": ["spelling", "readability", "formality"]
                }
            ],
            "languages": [
                {
                    "id": "en_GB",
                    "displayName": "English (Great Britain)"
                }
            ],
            "goals": [
                {
                    "id": "spelling",
                    "displayName": "Spelling",
                    "col": "#f21"
                }
            ],
            "contentFormats": [
                {
                    "id": "markdown",
                    "displayName": "Markdown",
                    "extensions": ["md"]
                },
                {
                    "id": "xml",
                    "displayName": "XML",
                    "extension": ["xml", "dita", "docbook"]
                }
            ],
            "contentEncodings": [ "base64+zip", "base64" ],
            "checkTypes": [ "batch", "cayt", "interactive" ],
            "reportTypes": ["scorecard/xml", "scorecard/html", "debug", "termharvesting", "FIXMETOBEDONE"]
        }

##  Submit a check [POST /api/v1/checking/submit]

* Request (application/json)

        {
            "audience": "aud-1",
            "checkType": "batch",
            "reportTypes": ["debug", "termharvesting"],
            "content": {
                "request": "text to check",
                "encoding": "base64+zip",
                "format": "markdown",
                "reference": "filename",
                "author": "Ralf",
                "mimeType": "application/vnd.adobe.cc" // TODO: still valid?
            }
        }

* Response 200 (application/json)

        {
            "id": 153,
            "links": {
                "status": "https://host:port/api/v1/checking/153/status",
                "cancel": "https://host:port/api/v1/checking/153"   // TODO: should be DELETE
            }
        }


## Get check status [GET /api/v1/checking/{id}/status]

* Parameters
    * id (required, number, `1`) ... the check id
    
* Response 200 (application/json)

        {
            "id": 153,
            "state": "done",
            "percent": 100,
            "message": "(10/10) Done."
            "links": {
                "result": "https://host:port/api/v1/checking/153/result",
                "cancel": "https://host:port/api/v1/checking/153"   // TODO: should be DELETE
            }
        }

## Get check result [GET /api/v1/checking/{id}/result{?includeReport}]

TODO: how to handle the "JSON report"? Is this a "report" or something else? What if the integration is
not interested in the JSON result, but in the scorecard only?

* Parameters
    * id: `1` (required, number) ... the check id
    * includeReport: `json` (optional, enum[string])
        The type of the report to include as a string in the response. 
        Must be one of 'reportTypes'. The query parameter can appear multiple times to include multiple reports.

* Response 200 (application/json)

        {
            "id": 153,
            "quality": {
                "score": 57,
                "status": "red"   // TODO: which values are allowed?
            },
            "counts": {
                "sentences": 10,
                "words": 121,
                "issues": 13
            },
            "issueOverview": [
                {
                    "goalId": "spelling",
                    "count": 13
                }, {
                    "goalId": "grammar",
                    "count": 0
                }
            ],
            "reports": [
                {
                    "reportType": "html",
                    "link": "https://tenant.acrolinx.cloud/output/en/abcdef_1_report.html"
                }, {
                    "reportType": "json",
                    "link": "https://tenant.acrolinx.cloud/output/en/abcdef_1_report.json",
                    "contents": "{ \"report\": {\"flags\"[ ...... "                
                }
            ]
        }


# Group Unused stuff

## Notes Collection [/api/v1/collections]
### List all Notes [GET]
+ Response 200 (application/json)

        [{
          "id": 1, "title": "Jogging in park"
        }, {
          "id": 2, "title": "Pick-up posters from post-office"
        }]

### Create a Note [POST]
+ Request (application/json)

        { "title": "Buy cheese and bread for breakfast." }

+ Response 201 (application/json)

        { "id": 3, "title": "Buy cheese and bread for breakfast." }

## Note [/notes/{id}]
A single Note object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Note to perform action with. Has example value.

### Retrieve a Note [GET]
+ Response 200 (application/json)

    + Header

            X-My-Header: The Value

    + Body

            { "id": 2, "title": "Pick-up posters from post-office" }

### Remove a Note [DELETE]
+ Response 204
