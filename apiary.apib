FORMAT: 1A
HOST: https://tenant.acrolinx.cloud

# acrolinx
Acrolinx API is the new REST API for accessing all functionality of the Acrolinx server.

# Group Capabilities

## Index [/api/v1]
### List all [GET]

+ Request

    + Header

            Auth-Token: ""


+ Response 200 (application/json)

        {
            "server": {
                "version": "5.2.1",
            },
            "links": {
                "login": "https://host:port/api/v1/login/authenticate"
            },
            "locales": [ "en" ]
        }


+ Request

    + Header

            Auth-Token: 123579080a8d1fee12490a90dc3


+ Response 200 (application/json)

        {
            "server": {
                "version": "5.2.1",
            },
            "links": {
                "checking": "https://host:port/api/v1/checking",
                "terminology": "https://host:port/api/v1/terminology",
                "findability": "https://host:port/api/v1/findability",
            },
            "locales": {
                "en"
            },
            "settings": {
                "useLegacyResultDialog": true
            }
        }


+ Response 401 (application/json)

        {  // Response can happen at any time
            "message": "Bla",
            "type": "com.acrolinx.faults.NoSuchAuthTokenFault",
            "links": {
                "login": "https://host:port/api/v1/login/authenticate"
            }
        }

# Group Authentication

## Authenticate [POST /api/v1/login/authenticate]

+ Request (application/json)

    + Header

            Auth-Token: 123579080a8d1fee12490a90dc3

    + Body

            {
                "clientInfo": {   // TODO: required for authentication? which fields?
                    "signature": "QWNyb2xpbnhGb3JJbkZvckFkb2JlSW5EZXNpZ24",
                    "displayName": "Acrolinx Plug-in for Adobe InDesign",
                    "version": "1.2",
                    "build": "4201"
                }
            }


+ Response 200 (application/json)

        {
            "authToken": "123579080a8d1fee12490a90dc3",
            "privileges": [ "checking" ],
            "user": {
              // ...
            }
        }



+ Request (application/json)

    + Header

            Auth-Token: ""

    + Body

            {
                "privileges": [ "checking" ],
                "clientInfo": {   // TODO: required for authentication? which fields?
                    "signature": "QWNyb2xpbnhGb3JJbkZvckFkb2JlSW5EZXNpZ24",
                    "displayName": "Acrolinx Plug-in for Adobe InDesign",
                    "version": "1.2",
                    "build": "4201"
                }
            }

+ Response 401 (application/json)

            {
                "message": "Authentication required",
                "type": "com.acrolinx.faults.AuthenticationRequired",
                "links": {
                    "openInBrowser": "http://host.com:8031/dashboard.html?login=19901-2-8412998412"
                    "pollAuthToken": "http://host.com:8031/api/v1/login/poll?id=185-0ijfgklejt2390tui"
                }
            }


## Poll for Auth token [GET /api/v1/login/poll{?id}]

+ Response 401 (application/json)

            {
                "message": "Authentication pending",
                "type": "com.acrolinx.faults.AuthenticationPending",
            }

+ Response 401 (application/json)

            {
                "message": "Unknown poll ID",
                "type": "com.acrolinx.faults.NoSuchPollID",
            }


+ Response 200 (application/json)

            {
                "authToken": "123579080a8d1fee12490a90dc3",
                "privileges": [ "checking" ],
                "user": {
                // ...
                }
            }




# Group User Metadata

* There will be an API to manage/update user metadata for the logged in user, similar to the one we have today.
* In case user metadata is _required_:
** Interactive integrations: This will already be handled via unified authentication. Immediately before granting
access to an integration, the user needs to fill out his/her user metadata. It is thus impossible to obtain an
auth token for a user with incomplete required user metadata. 
** Headless (API key-based) integations: This will be handled by dashboard access. After logging in to the dashboard,
the user needs to fill out his/her user metadata before getting to the actual dashboard. API keys can only be obtained
in the dashboard for the logged-in user. It is thus impossible to obtain an API key for a user with incomplete required user metadata.

TBD: If you enable 'require UMD' in the dashboard, should this invalidate all API keys and auth tokens?

# Group Document ID
## Create or retrieve document ID [POST /api/v1/document{?forceNew}]

Document information fields are used to (a) associate ID with document info, (b) search for existing ID that matches given fields.
For searching: All fields are optional. A missing field means "unknown". "unknown" matches only "unknown". If "reference" is missing, forceNew is implicitly true (=no searching).

* Parameters
    * forceNew: `true` (optional, boolean) ... create a new document ID even if there is a matching existing document
        
        Default: false

+ Request (application/json)

        {
            "reference": "abc.docx",
            "mimeType": "application/word",            
            "author": "Ralf",
            "contentType": "E-Mail"
        }

+ Response 200 (application/json)

        {
            "id": "283ab1e075f21a",
            "reference": "abc.docx",
            "mimeType": "application/word",            
            "author": "Ralf",
            "contentType": "E-Mail"
            "metadata": [
                {
                    "displayName": "Project ID",
                    "key": "projectId",
                    "value": null,
                    "required": true
                }
            ]                    
        }

## Put/update document information [PUT /api/v1/document/{id}]

+ Request (application/json)

        {
            "reference": "abc.docx",
            "mimeType": "application/word",            
            "author": "Ralf",
            "contentType": "E-Mail",
            "metadata": [
                {
                    "key": "projectId",
                    "value": "Marketing Campaign"
                }
            ]                    
        }


+ Response 200 (application/json)

        {
            "id": "283ab1e075f21a",
            "reference": "abc.docx",
            "mimeType": "application/word",            
            "author": "Ralf",
            "contentType": "E-Mail",
            "metadata": [
                {
                    "displayName": "Project ID",
                    "key": "projectId",
                    "value": "Marketing Campaign",
                    "required": true
                }
            ]
        }



# Group Checking
## List all checking methods [GET /api/v1/checking]

+ Response 200 (application/json)

        {
            "inputFormats": [], // why is this here again?
            "links": {
                "submit": "https://host:port/api/v1/checking/submit",
                "capabilities": "https://host:port/api/v1/checking/capabilities",
            }
        }



## List checking capabilities [GET /api/v1/checking/capabilities]

// TODO: term sets as proper objects?

+ Response 200 (application/json)

        {
            "audiences": [
                {
                    "id": "aud-1",
                    "displayName": "Tom the Technical Type",
                    "language": "en_GB",
                    "goals": ["spelling", "voice.readability", "term.unsuitable", "term.admitted"],
                    "termSets": ["Switches", "Acrolinx"]
                }
            ],
            "languages": [
                {
                    "id": "en_GB",
                    "displayName": "English (Great Britain)"
                }
            ],
            "goals": [
                {
                    "id": "spelling",
                    "displayName": "Spelling",
                    "col": "#f21"
                },
                {
                    "id": "voice.readability",
                    "displayName": "Clarity",
                    "col": "#f22"
                },
                {
                    "id": "term.unsuitable",
                    "displayName": "Unsuitable Term",
                    "col": "#f23"
                },
                {
                    "id": "term.admitted",
                    "displayName": "Use with caution",
                    "col": "#f24"
                }
            ],
            "contentFormats": [
                {
                    "id": "auto",
                    "displayName": "Automatic Detection",   // TODO: what do we do with this again?
                    "extensions": ["*"]                     // TODO: what do we do with this again?
                },
                {
                    "id": "text",
                    "displayName": "Plain Text",
                    "extensions": ["txt"]
                },
                {
                    "id": "markdown",
                    "displayName": "Markdown",
                    "extensions": ["md"]
                },
                {
                    "id": "xml",
                    "displayName": "XML",
                    "extension": ["xml", "dita", "docbook"]
                },
                {
                    "id": "word_xml",
                    "displayName": "XML (MS Word 2003)",
                    "extension": ["xml"]
                }
                
            ],
            "contentEncodings": [ "none", "zip,base64", "base64" ],
            "checkTypes": [ "batch", "cayt", "interactive" ],
            "reportTypes": ["scorecard.xml", "scorecard.html", "debug", "termharvesting"]
        }

##  Submit a check [POST /api/v1/checking/submit]

Client can send document ID only if known, other fields only to get/create document ID, document ID plus other fields to update info about document.

+ Request (application/json)

        {
            "content": "text to check",                  // required
            "contentEncoding": "zip,base64",             // optional, default: none = HTTP request encoding
            "checkOptions": {
                "audienceId": "aud-1",                       // optional, default: first audience
                "termSets": ["Acrolinx"],                    // optional, default: all available for audience
                "reportTypes": ["debug", "termharvesting"],  // optional, default: scorecard.html
                "contentFormat": "word_xml",                 // optional, default: auto
                "checkType": "batch"                         // optional, default: interactive
            },
            "document": {                                // optional, default: empty "document" object
                "id": "283ab1e075f21a",                  // optional, default: search for or create ID with following infos; if present: update ID with following infos
                "reference": "abc.docx",                 // optional, default: do not search for ID, always create
                "author": "Ralf",
                "mimeType": "application/word",
                "contentType": "E-Mail",
                "metadata": []                           // update all provided metadata, keep all other existing metadata
            },
            "clientInfo": {                              // optional, used for CSD selection and reporting
                "signature": "QWNyb2xpbnhGb3JJbkZvckFkb2JlSW5EZXNpZ24",
                "displayName": "Acrolinx Plug-in for Adobe InDesign",
                "version": "1.2",
                "build": "4201"
            }
        }

+ Response 200 (application/json)

        {
            "id": "153",
            "checkOptions": {
                "audienceId": "aud_1",
                "termSets": ["Acrolinx"],
                "reportTypes": ["debug", "termharvesting"],
                "contentFormat": "word_xml",
                "checkType": "batch"
            },            
            "document": {                                
                "id": "283ab1e075f21a",
                "reference": "abc.docx",
                "author": "Ralf",
                "mimeType": "application/word",
                "contentType": "E-Mail",
                "metadata": [
                    {
                        "displayName": "Project ID",
                        "key": "projectId",
                        "value": "Marketing Campaign",
                        "required": true
                    }
                ]           
            },
            "links": {
                "status": "https://host:port/api/v1/checking/153/status",
                "cancel": "https://host:port/api/v1/checking/153"   // TODO: should be DELETE
            }
        }

+ Response 400 (application/json)

        {
            "message": "Document Metadata required",
            "type": "com.acrolinx.faults.DocumentMetadataRequired",
            "document": {
                "id": "283ab1e075f21a",
                "reference": "abc.docx",
                "mimeType": "application/word",            
                "author": "Ralf",
                "contentType": "E-Mail",
                "metadata": [
                    {
                        "displayName": "Project ID",
                        "key": "projectId",
                        "value": null,
                        "required": true
                    }
                ]                    
            }
            "links": {
                "submitMetadata": "https://host:port/api/v1/document/283ab1e075f21a/metadata"                
            },
            "actions": [
                {
                    "id": "submitMetadataForm",
                    "url": "https://host:8031/documentMetadata.html?documentId=283ab1e075f21a",
                    "displayName": "Add required document metadata",
                    "icon": "..."
                }   
            ]
        }


## Get check status [GET /api/v1/checking/{id}/status]

+ Parameters
    + id: `153` (required, number) ... the check id
    
+ Response 200 (application/json)

        {
            "id": "153",
            "documentId": "283ab1e075f21a",            
            "state": "done",
            "percent": 100,
            "message": "(10/10) Done."
            "links": {
                "result": "https://host:port/api/v1/checking/153/result",
                "cancel": "https://host:port/api/v1/checking/153"   // TODO: should be DELETE
            }         
        }

## Get check result [GET /api/v1/checking/{id}/result]

+ Parameters
    + id: `153` (required, number) ... the check id

+ Response 200 (application/json)

        {
            "id": "153",
            "checkOptions": {
                "audienceId": "aud_1",
                "termSets": ["Acrolinx"],
                "reportTypes": ["debug", "termharvesting"],
                "contentFormat": "word_xml",
                "checkType": "batch"
            },            
            "document": {
                "id": "283ab1e075f21a",
                "reference": "abc.docx",
                "mimeType": "application/word",            
                "author": "Ralf",
                "contentType": "E-Mail",
                "metadata": [
                    {
                        "displayName": "Project ID",
                        "key": "projectId",
                        "value": "Marketing Campaign",
                        "required": true
                    }
                ]
            },            
            "quality": {
                "score": 57,
                "status": "red"   // TODO: which values are allowed?
            },
            "counts": {
                "sentences": 10,
                "words": 121,
                "issues": 15
            },
            "goals": [
                {
                    "id": "spelling",
                    "displayName": "Spelling",
                    "col": "#f21",
                    "issueCount": 13,
                },
                {
                    "id": "voice.readability",
                    "displayName": "Clarity",
                    "col": "#f22"
                    "issueCount": 2,
                },
                {
                    "id": "term.unsuitable",
                    "displayName": "Unsuitable Term",
                    "col": "#f23",
                    "issueCount": 0
                }
            ],
            "issues": [
                {
                    "goalId": "spelling",
                    "internalName": "title_case_chicago",
                    "displayName": "Use Chicago style for the title case?",
                    "guidance": "<div class=\"shortHelp\" lang=\"en\" xml:lang=\"en\">\n<p>According to the <q>Chicago Manual of Style</q>, here's how you write titles:</p>\n<ul>\n<li>Capitalize the first word and the last word.</li>\n<li>Capitalize all \"main\" words.</li>\n<li>Don't capitalize articles and conjunctions (example: <q>a</q>, <q>and</q>).</li>\n<li>Don't capitalize prepositions independent of their length (example: <q>about</q>, <q>around</q>).</li>\n</ul>\n</div>",
                    "extractedSurface": "zentense"
                    "positionalInformation": {
                        "hashes": {           // TODO: positional info? groupId grouped flags based on type (e.g. all flags of a rule), but issue hash just groups internalName+extractedSurface
                            "issue": "BhKh3iaGBjB7Cw6M/GwrLQ==",
                            "environment": "vJ9eCVViEpIdM76h+5K/nA==",
                            "index": "hjlRLT0K+LlvlslKdNUlhw==1"
                        },
                        "matches": [{
                            "extractedPart": "zen",
                            "extractedBegin": 30,
                            "extractedEnd": 33,
                            "originalPart": "zen",
                            "originalBegin": 19247,
                            "originalEnd": 19255
                        }, {
                            "extractedPart": "te",
                            "extractedBegin": 33,
                            "extractedEnd": 35,
                            "originalPart": "&te;",
                            "originalBegin": 19250,
                            "originalEnd": 19254
                        },{
                            "extractedPart": "nse",
                            "extractedBegin": 35,
                            "extractedEnd": 38,
                            "originalPart": "nse",
                            "originalBegin": 19254,
                            "originalEnd": 19257
                        }],
                    },
                    "readonly": true,
                    "issueLocations": [
                        {
                            "locationId": "pageLocation",
                            "displayName": "Page 4",
                            "values": { "page": "4" }
                        }
                    ],
                    "suggestions": [
                        {
                            "surface": "sentence",
                            "groupId": "sentence",
                            "replacements": {
                                0: "sen",
                                2: "nce"
                            }
                    ],
                    "actions": [
                        {
                            "id": "help",
                            "url": "https://tenant.acrolinx.cloud/htmldata/en/rules/help/title_case_chicago.html",
                            "displayName": "Help",
                            "icon": "help-icon"
                        }, 
                        {
                            "id": "termContributionForm",
                            "url": "https://tenant.acrolinx.cloud/termcontribution.html?surface=@@base64:cXdlcnR5dWlvcA==&locale=en&language=en&userid=admin&context=@@base64:VGhpcyBzZW50ZW5jZSBoYXMgYSBxd2VydHl1aW9wLg==#",
                            "displayName": "Add as Term",
                            "icon": "icon-term-contribute",
                            "replacedBy": "termContribution"
                        }
                    ],
                    "links":
                        {
                            "termContribution": "https://tenant.acrolinx.cloud/terminology/rest/v7/contribute",
                            "addToDictionary": "..."
                        }                    
                },
                {
                    "goalId": "term.unsuitable",
                    "internalName": "term_flag",
                    "displayName": "<b>Illegal sublanguage variant</b> of preferred term",
                    "guidance": "<div class=\"guidance term\">\n\t<b>Domains</b>\n\t\t\t<br/><i>RA-Terms</i>\n\t\t\t\t\t<br/>\n\t\t<b>Note</b>\n\t\t<br/>\n\t\tUse &#39;please&#39; in presale materials only. Do NOT use &#39;please&#39; in postsale material.\n\t</div>\n",
                    "extractedSurface": "Please"
                    "positionalInformation": {
                        "hashes": {           
                            "issue": "3qyt/AVxwNTOUQSuMA7brw==",
                            "environment": "TiwIFBwA6X920mDAezJTyQ==",
                            "index": "Lm9PqBGGm+tj21rt3pkpjA==1"
                        },
                        "matches": [{
                            "extractedPart": "Please",
                            "extractedBegin": 766,
                            "extractedEnd": 772
                            "originalPart": "Please",
                            "originalBegin": 28223,
                            "originalEnd": 28229,
                        }],
                    },
                    "readonly": false,
                    "issueLocations": [],
                    "suggestions": [
                        {
                            "surface": "blablub",
                            "icon": "https://tenant.acrolinx.cloud/tng/icons/preferred.svg" // TODO: icon class+url?
                            "groupId": "2653",
                            "replacements": {
                                0: "blablub"
                            },
                        }
                    ],
                    "actions": [
                        {
                            "id": "help",
                            "url": "https://tenant.acrolinx.cloud/termhelp?termUniversalId=9c2e9ffb-a314-4b61-94b2-d62db3c18945&locale=en",
                            "displayName": "Help",
                            "icon": "help-icon"
                        }
                    ],
                    "debug": {
                        "term": {
                            "surface": "please",
                            "status": "DEPRECATED",
                            "termSets": ["RA-Terms"],
                            "domains": ["RA-Terms"]
                            "variant": "legalVariantIllegal",
                        }
                    }
                },
                {
                    "goalId": "voice.readability",
                    "internalName": "en-clarity-medium",
                    "displayName": "Too complex? Your readers need a medium level of clarity. ",                
                    "guidance": "",
                    "extractedSurface": "Reports ... length",
                    "positionalInformation": {
                        "hashes": {
                            "issue": "E3OxJ3bFcfWLyAisUxufAA==",
                            "environment": "XVYQZVyCoFOr1TDeyXuMgg==",
                            "index": "accsS0dbn/3rafcbT9NJGw==1"
                        },
                        "matches": [{
                            "extractedPart": "Reports",
                            "extractedBegin": 1360,
                            "extractedEnd": 1367
                            "originalPart": "Reports",
                            "originalBegin": 33173,
                            "originalEnd": 33180,
                        }, {
                            "extractedPart": "length",
                            "extractedBegin": 1749,
                            "extractedEnd": 1755
                            "originalPart": "length",
                            "originalBegin": 33562,
                            "originalEnd": 33568,
                        }]
                    },
                    "suggestions": [],
                    "issueLocations": [],
                    "readonly": false,
                    "debug": {
                        "penalty": 1234.0967741949999                    
                    },
                    "subIssues": [{
                        "goalId": "voice.readability",
                        "internalName": "phenomenon_embedded_or_complex_sentence",
                        "displayName": "Try to split up this sentence.",
                        "guidance": "<p>This sentence doesn't seem to flow smoothly. We found a few embedded phrases in there that could be messing with your flow somehow.</p>",
                        "extractedSurface": "Reports ... length",
                        "positionalInformation": {
                            "hashes": {
                                "issue": "7s1nqUN96X+P6VY4FlfSQQ==",
                                "environment": "XVYQZVyCoFOr1TDeyXuMgg==",
                                "index": "++0c1Z/OQu1Mwzt0KpkYYA==1"
                            },
                            "matches": [{
                                "extractedPart": "Reports",
                                "extractedBegin": 1360,
                                "extractedEnd": 1367
                                "originalPart": "Reports",
                                "originalBegin": 33173,
                                "originalEnd": 33180,
                            }, {
                                "extractedPart": "length",
                                "extractedBegin": 1749,
                                "extractedEnd": 1755
                                "originalPart": "length",
                                "originalBegin": 33562,
                                "originalEnd": 33568,
                            }]
                        },
                        "suggestions": [],
                        "issueLocations": [],
                        "readonly": false,
                        "debug": {
                            "penalty": 320.0
                        }
                    }, {
                        "goalId": "voice.readability",
                        "internalName": "phenomenon_passive",
                        "displayName": "The active voice is usually clearer.",
                        "guidance": "<p>This one could do with a bit of pep. It's probably because it feels kind of passive. We love it when you're assertive.</p>",
                        "extractedSurface": "was first seen",
                        "positionalInformation": {
                            "hashes": {
                                "flag": "dg+ih1XodWeL7lJ/wo17QQ==",
                                "environment": "XVYQZVyCoFOr1TDeyXuMgg==",
                                "index": "fOJLASZHiwnwcJWcfbkXnw==1"
                            },
                            "matches": [{
                                "part": "was",
                                "begin": 33219,
                                "end": 33222,
                                "extractedBegin": 1406,
                                "extractedEnd": 1409
                            }, {
                                "part": "first",
                                "begin": 33223,
                                "end": 33228,
                                "extractedBegin": 1410,
                                "extractedEnd": 1415
                            }, {
                                "part": "seen",
                                "begin": 33229,
                                "end": 33233,
                                "extractedBegin": 1416,
                                "extractedEnd": 1420
                            }]
                        },
                        "suggestions": [],
                        "issueLocations": [],
                        "readonly": false,
                        "debug": {
                            "penalty": 40.0
                        }
                    }
                }
            ],
            "keywords": [
                "links": {
                    "getTargetKeywords": "/iq/services/v1/rest/findability/targetKeywords?contextId=C%3A%5CUsers%5Cgrabowski%5CDesktop%5Ccloud-linguistic-smoketest.docx",
                    "putTargetKeywords": "/iq/services/v1/rest/findability/targetKeywords?contextId=C%3A%5CUsers%5Cgrabowski%5CDesktop%5Ccloud-linguistic-smoketest.docx"
                },
                "discovered": [{
                    "keyword": "Clarity card",
                    "sortKey": "10",
                    "density": 0.2546269436736127,
                    "count": 4,
                    "prominence": 0.0,
                    "occurrences": [{
                        "matches": [
                          // ...
                        ]
                    }],
                    "warnings": []
                }],
                "target": []
            ],
            "extraInfos": [
                {
                    "id": "rioseo",
                    "title": "IBM KIS",
                    "iconClass": "search-icon",
                    "iconUrl": "...",
                    "url": "https://kis.example.com/info?projectId=52351235"
                } 
            ],
            "reports": [
                {
                    "reportType": "scorecard.html",
                    "link": "https://tenant.acrolinx.cloud/output/en/abcdef_1_report.html"
                }, 
                {
                    "reportType": "scorecard.xml",
                    "link": "https://tenant.acrolinx.cloud/output/en/abcdef_1_report.xml"
                }
            ],
            "actions": [
                {
                    "id": "termContributionForm",
                    "url": "https://tenant.acrolinx.cloud/termcontribution.html",
                    "displayName": "Add as Term",
                    "icon": "icon-term-contribute",
                    "replacedBy": "termContribution"
                }
            ],
            "links":
                {
                    "termContribution": "https://tenant.acrolinx.cloud/terminology/rest/v7/contribute",
                    "deleteScorecard": "https://tenant.acrolinx.cloud/api/v1/checking/153/result"
                }            
        }
