FORMAT: 1A
HOST: https://tenant.acrolinx.cloud

# acrolinx
Acrolinx API is the new REST API for accessing all functionality of the Acrolinx server.

# Group Capabilities

## Index [/api/v1]
### List all [GET]

+ Response 200 (application/json)

        {
            "server": {
                "version": "5.2.1",
            },
            "links": [
                "checking": "https://host:port/api/v1/checking",
                "terminology": "https://host:port/api/v1/terminology",
                "findability": "https://host:port/api/v1/findability",
            ],
            "locales": {},
            "settings": {
                "useLegacyResultDialog": true
            }
        }

+ Response 401 (application/json)

        {
            "message": "Bla",
            "type": "com.acrolinx.faults.NoSuchAuthTokenFault",
            "links": {
                "login": "https://host:port/api/v1/authenticate"
            }
        }

# Group Authentication

See unified authentication: DEV-10327

# Group User Metadata
Might be handled via unified authentication, plese check AEM / Apple proxy case.


# Group Checking
## List all checking methods [GET /api/v1/checking]

* Response 200 (application/json)

        {
            "inputFormats": [], // why is this here again?
            "links": {
                "submit": "https://host:port/api/v1/checking/submit",
                "capabilities": "https://host:port/api/v1/checking/capabilities",
            }
        }



## List checking capabilities [GET /api/v1/checking/capabilities]

// TODO: term sets

* Response 200 (application/json)

        {
            "audiences": [
                {
                    "id": "aud-1",
                    "displayName": "Tom the Technical Type",
                    "language": "en_GB",
                    "goals": ["spelling", "voice.readability", "term.unsuitable", "term.admitted"],
                }
            ],
            "languages": [
                {
                    "id": "en_GB",
                    "displayName": "English (Great Britain)"
                }
            ],
            "goals": [
                {
                    "id": "spelling",
                    "displayName": "Spelling",
                    "col": "#f21"
                },
                {
                    "id": "voice.readability",
                    "displayName": "Clarity",
                    "col": "#f22"
                },
                {
                    "id": "term.unsuitable",
                    "displayName": "Unsuitable Term",
                    "col": "#f23"
                },
                {
                    "id": "term.admitted",
                    "displayName": "Use with caution",
                    "col": "#f24"
                }
            ],
            "contentFormats": [
                {
                    "id": "markdown",
                    "displayName": "Markdown",
                    "extensions": ["md"]
                },
                {
                    "id": "xml",
                    "displayName": "XML",
                    "extension": ["xml", "dita", "docbook"]
                }
            ],
            "contentEncodings": [ "zip,base64", "base64" ],
            "checkTypes": [ "batch", "cayt", "interactive" ],
            "reportTypes": ["scorecard.xml", "scorecard.html", "debug", "termharvesting", "FIXMETOBEDONE"]
        }

##  Submit a check [POST /api/v1/checking/submit]

* Request (application/json)

        {
            "audience": "aud-1",
            "checkType": "batch",
            "reportTypes": ["debug", "termharvesting"],
            "content": {
                "request": "text to check",
                "encoding": "zip,base64",
                "format": "markdown",
                "reference": "README.md",
                "author": "Ralf",
                "mimeType": "application/vnd.adobe.cc" // TODO: still valid?
            }
        }

* Response 200 (application/json)

        {
            "id": 153,
            "links": {
                "status": "https://host:port/api/v1/checking/153/status",
                "cancel": "https://host:port/api/v1/checking/153"   // TODO: should be DELETE
            }
        }


## Get check status [GET /api/v1/checking/{id}/status]

* Parameters
    * id (required, number, `1`) ... the check id
    
* Response 200 (application/json)

        {
            "id": 153,
            "state": "done",
            "percent": 100,
            "message": "(10/10) Done."
            "links": {
                "result": "https://host:port/api/v1/checking/153/result",
                "cancel": "https://host:port/api/v1/checking/153"   // TODO: should be DELETE
            }         
        }

## Get check result [GET /api/v1/checking/{id}/result]

* Parameters
    * id: `153` (required, number) ... the check id

* Response 200 (application/json)

        {
            "id": "153",
            "quality": {
                "score": 57,
                "status": "red"   // TODO: which values are allowed?
            },
            "counts": {
                "sentences": 10,
                "words": 121,
                "issues": 13
            },
            "issueOverview": [
                {
                    "goalId": "spelling",
                    "count": 13
                }, {
                    "goalId": "grammar",
                    "count": 0
                }
            ],
            "issues": [
                {
                    "goalId": "spelling",
                    "internalName": "title_case_chicago",
                    "displayName": "Use Chicago style for the title case?",
                    "guidance": "<div class=\"shortHelp\" lang=\"en\" xml:lang=\"en\">\n<p>According to the <q>Chicago Manual of Style</q>, here's how you write titles:</p>\n<ul>\n<li>Capitalize the first word and the last word.</li>\n<li>Capitalize all \"main\" words.</li>\n<li>Don't capitalize articles and conjunctions (example: <q>a</q>, <q>and</q>).</li>\n<li>Don't capitalize prepositions independent of their length (example: <q>about</q>, <q>around</q>).</li>\n</ul>\n</div>",
                    "extractedSurface": "zentense"
                    "groupId": "spelling|||zentense",
                    "key": "zentense", // TODO: needed?
                    "positionalInformation": {
                        "hashes": {           // TODO: positional info? subsumes groupId?
                            "issue": "BhKh3iaGBjB7Cw6M/GwrLQ==",
                            "environment": "vJ9eCVViEpIdM76h+5K/nA==",
                            "index": "hjlRLT0K+LlvlslKdNUlhw==1"
                        },
                        "matches": [{
                            "extractedPart": "zen",
                            "extractedBegin": 30,
                            "extractedEnd": 33,
                            "originalPart": "zen",
                            "originalBegin": 19247,
                            "originalEnd": 19255
                        }, {
                            "extractedPart": "te",
                            "extractedBegin": 33,
                            "extractedEnd": 35,
                            "originalPart": "&te;",
                            "originalBegin": 19250,
                            "originalEnd": 19254
                        },{
                            "extractedPart": "nse",
                            "extractedBegin": 35,
                            "extractedEnd": 38,
                            "originalPart": "nse",
                            "originalBegin": 19254,
                            "originalEnd": 19257
                        }],
                    },
                    "readonly": true,
                    "issueLocations": [
                        {
                            "locationId": "pageLocation",
                            "displayName": "Page 4",
                            "values": { "page": "4" }
                        }
                    ],
                    "suggestions": [
                        {
                            "surface": "sentence",
                            "groupId": "sentence",
                            "replacements": {
                                0: "sen",
                                2: "nce"
                            }
                    ],
                    "links": [
                        "help": "https://tenant.acrolinx.cloud/htmldata/en/rules/help/title_case_chicago.html",
                        "termContributionForm": "https://tenant.acrolinx.cloud/termcontribution.html?surface=@@base64:cXdlcnR5dWlvcA==&locale=en&language=en&userid=admin&context=@@base64:VGhpcyBzZW50ZW5jZSBoYXMgYSBxd2VydHl1aW9wLg==#"
                    ]                    
                },
                {
                    "issueId": "412", // needed?
                    "goalId": "term.unsuitable",
                    "internalName": "term_flag",
                    "displayName": "Unsuitable term",
                    "guidance": "<div class=\"guidance term\">\n\t<b>Domains</b>\n\t\t\t<br/><i>RA-Terms</i>\n\t\t\t\t\t<br/>\n\t\t<b>Note</b>\n\t\t<br/>\n\t\tUse &#39;please&#39; in presale materials only. Do NOT use &#39;please&#39; in postsale material.\n\t</div>\n",
                    "extractedSurface": "Please"
                    "groupId": "5681",
                    "positionalInformation": {
                        "hashes": {           // positional info? subsumes groupId?
                            "issue": "3qyt/AVxwNTOUQSuMA7brw==",
                            "environment": "TiwIFBwA6X920mDAezJTyQ==",
                            "index": "Lm9PqBGGm+tj21rt3pkpjA==1"
                        },
                        "matches": [{
                            "extractedPart": "Please",
                            "extractedBegin": 766,
                            "extractedEnd": 772
                            "originalPart": "Please",
                            "originalBegin": 28223,
                            "originalEnd": 28229,
                        }],
                    },
                    "readonly": false,
                    "issueLocations": [
                      // TODO
                    ],
                    "suggestions": [
                        {
                            "surface": "blablub",
                            "groupId": "2653",
                            "replacements": {
                                0: "blablub"
                            },
                            "term": {  // TODO: needed?
                                "id": "4214",
                                "surface": "blablub",
                                "status": "PREFERRED",
                                "termSets": ["RA-Terms"],
                                "domains": ["RA-Terms"]
                            }
                    ],
                    "term": {
                        "id": "5681",
                        "surface": "please",
                        "status": "DEPRECATED",
                        "termSets": ["RA-Terms"],
                        "domains": ["RA-Terms"]
                    },                        
                    "termVariant": "legal", // one of exact, legal, admitted, illegal, sublanguage.illegal
                    "termConflicts": [{
                        "issueId": "123",
                        "termId": "4215"
                    }],
                    "links": [
                        "help": "https://tenant.acrolinx.cloud/termhelp?termUniversalId=9c2e9ffb-a314-4b61-94b2-d62db3c18945&locale=en"
                    ]
                },
                
            ],
            {
                "goalId": "voice.readability",
                "internalName": "en-clarity-medium",
                "displayName": "Too complex? Your readers need a medium level of clarity. ",                
                "guidance": "",
                "extractedSurface": "Reports ... length",
                "groupId": "",
                "positionalInformation": {
                    "hashes": {
                        "flag": "E3OxJ3bFcfWLyAisUxufAA==",
                        "environment": "XVYQZVyCoFOr1TDeyXuMgg==",
                        "index": "accsS0dbn/3rafcbT9NJGw==1"
                    },
                    "matches": [{
                        "extractedPart": "Reports",
                        "extractedBegin": 1360,
                        "extractedEnd": 1367
                        "originalPart": "Reports",
                        "originalBegin": 33173,
                        "originalEnd": 33180,
                    }, {
                        "extractedPart": "length",
                        "extractedBegin": 1749,
                        "extractedEnd": 1755
                        "originalPart": "length",
                        "originalBegin": 33562,
                        "originalEnd": 33568,
                    }]
                },
                "suggestions": [],
                "issueLocations": [],
                "readonly": false,
                "penalty": 1234.0967741949999,
                "subFlags": [{
                    "goalId": "voice.readability",
                    "internalName": "phenomenon_embedded_or_complex_sentence",
                    "displayName": "Try to split up this sentence.",
                    "guidance": "<p>This sentence doesn't seem to flow smoothly. We found a few embedded phrases in there that could be messing with your flow somehow.</p>",
                    "extractedSurface": "Reports ... length",
                    "groupId": "",
                    "positionalInformation": {
                        "hashes": {
                            "flag": "7s1nqUN96X+P6VY4FlfSQQ==",
                            "environment": "XVYQZVyCoFOr1TDeyXuMgg==",
                            "index": "++0c1Z/OQu1Mwzt0KpkYYA==1"
                        },
                        "matches": [{
                            "extractedPart": "Reports",
                            "extractedBegin": 1360,
                            "extractedEnd": 1367
                            "originalPart": "Reports",
                            "originalBegin": 33173,
                            "originalEnd": 33180,
                        }, {
                            "extractedPart": "length",
                            "extractedBegin": 1749,
                            "extractedEnd": 1755
                            "originalPart": "length",
                            "originalBegin": 33562,
                            "originalEnd": 33568,
                        }]
                    },
                    "suggestions": [],
                    "issueLocations": [],
                    "readonly": false,
                    "penalty": 320.0
                }, {
                    "goalId": "voice.readability",
                    "internalName": "phenomenon_passive",
                    "displayName": "The active voice is usually clearer.",
                    "guidance": "<p>This one could do with a bit of pep. It's probably because it feels kind of passive. We love it when you're assertive.</p>",
                    "extractedSurface": "was first seen",
                    "groupId": "",
                    "positionalInformation": {
                        "hashes": {
                            "flag": "dg+ih1XodWeL7lJ/wo17QQ==",
                            "environment": "XVYQZVyCoFOr1TDeyXuMgg==",
                            "index": "fOJLASZHiwnwcJWcfbkXnw==1"
                        },
                        "matches": [{
                            "part": "was",
                            "begin": 33219,
                            "end": 33222,
                            "extractedBegin": 1406,
                            "extractedEnd": 1409
                        }, {
                            "part": "first",
                            "begin": 33223,
                            "end": 33228,
                            "extractedBegin": 1410,
                            "extractedEnd": 1415
                        }, {
                            "part": "seen",
                            "begin": 33229,
                            "end": 33233,
                            "extractedBegin": 1416,
                            "extractedEnd": 1420
                        }]
                    },
                    "suggestions": [],
                    "issueLocations": [],
                    "readonly": false,
                    "penalty": 40.0
                }]
            },
            "keywords": [
                "links": {
                    "getTargetKeywords": "/iq/services/v1/rest/findability/targetKeywords?contextId=C%3A%5CUsers%5Cgrabowski%5CDesktop%5Ccloud-linguistic-smoketest.docx",
                    "putTargetKeywords": "/iq/services/v1/rest/findability/targetKeywords?contextId=C%3A%5CUsers%5Cgrabowski%5CDesktop%5Ccloud-linguistic-smoketest.docx"
                },
                "discovered": [{
                    "keyword": "Clarity card",
                    "sortKey": "10",
                    "density": 0.2546269436736127,
                    "count": 4,
                    "prominence": 0.0,
                    "occurrences": [{
                        "matches": [
                          // ...
                        ]
                    }],
                    "warnings": []
                }],
                "target": []
            ],
            "extraInfos": {
                "links": [
                    {
                        "rioseo": "https://kis.example.com/info?projectId=52351235
                    } 
            },
            "reports": [
                {
                    "reportType": "scorecard.html",
                    "link": "https://tenant.acrolinx.cloud/output/en/abcdef_1_report.html"
                }, {
                    "reportType": "scorecard.xml",
                    "link": "https://tenant.acrolinx.cloud/output/en/abcdef_1_report.xml"
                }
            ]
        }


# Group Unused stuff

## Notes Collection [/api/v1/collections]
### List all Notes [GET]
+ Response 200 (application/json)

        [{
          "id": 1, "title": "Jogging in park"
        }, {
          "id": 2, "title": "Pick-up posters from post-office"
        }]

### Create a Note [POST]
+ Request (application/json)

        { "title": "Buy cheese and bread for breakfast." }

+ Response 201 (application/json)

        { "id": 3, "title": "Buy cheese and bread for breakfast." }

## Note [/notes/{id}]
A single Note object with all its details

+ Parameters
    + id (required, number, `1`) ... Numeric `id` of the Note to perform action with. Has example value.

### Retrieve a Note [GET]
+ Response 200 (application/json)

    + Header

            X-My-Header: The Value

    + Body

            { "id": 2, "title": "Pick-up posters from post-office" }

### Remove a Note [DELETE]
+ Response 204
